module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.12). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type Ads {
  city: String!
  id: ID!
  imageurl: String!
  visible: Boolean!
}

type AdsConnection {
  pageInfo: PageInfo!
  edges: [AdsEdge]!
  aggregate: AggregateAds!
}

input AdsCreateInput {
  city: String!
  id: ID
  imageurl: String!
  visible: Boolean!
}

type AdsEdge {
  node: Ads!
  cursor: String!
}

enum AdsOrderByInput {
  city_ASC
  city_DESC
  id_ASC
  id_DESC
  imageurl_ASC
  imageurl_DESC
  visible_ASC
  visible_DESC
}

type AdsPreviousValues {
  city: String!
  id: ID!
  imageurl: String!
  visible: Boolean!
}

type AdsSubscriptionPayload {
  mutation: MutationType!
  node: Ads
  updatedFields: [String!]
  previousValues: AdsPreviousValues
}

input AdsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AdsWhereInput
  AND: [AdsSubscriptionWhereInput!]
  OR: [AdsSubscriptionWhereInput!]
  NOT: [AdsSubscriptionWhereInput!]
}

input AdsUpdateInput {
  city: String
  imageurl: String
  visible: Boolean
}

input AdsUpdateManyMutationInput {
  city: String
  imageurl: String
  visible: Boolean
}

input AdsWhereInput {
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  imageurl: String
  imageurl_not: String
  imageurl_in: [String!]
  imageurl_not_in: [String!]
  imageurl_lt: String
  imageurl_lte: String
  imageurl_gt: String
  imageurl_gte: String
  imageurl_contains: String
  imageurl_not_contains: String
  imageurl_starts_with: String
  imageurl_not_starts_with: String
  imageurl_ends_with: String
  imageurl_not_ends_with: String
  visible: Boolean
  visible_not: Boolean
  AND: [AdsWhereInput!]
  OR: [AdsWhereInput!]
  NOT: [AdsWhereInput!]
}

input AdsWhereUniqueInput {
  id: ID
}

type AggregateAds {
  count: Int!
}

type AggregateBlog {
  count: Int!
}

type AggregateBrandTile {
  count: Int!
}

type Aggregatecity {
  count: Int!
}

type AggregateContacts {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateFriday {
  count: Int!
}

type AggregateHotDeals {
  count: Int!
}

type AggregateMisc {
  count: Int!
}

type AggregateMonday {
  count: Int!
}

type AggregateOrders {
  count: Int!
}

type AggregateRenoPass {
  count: Int!
}

type AggregateRestaurants {
  count: Int!
}

type AggregateRestaurantType {
  count: Int!
}

type AggregateSaturday {
  count: Int!
}

type AggregateSunday {
  count: Int!
}

type AggregateThursday {
  count: Int!
}

type AggregateTimeDiscount {
  count: Int!
}

type AggregateTuesday {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserReviews {
  count: Int!
}

type AggregateWednesday {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Blog {
  authorImg: String!
  authorName: String!
  content: String!
  createdon: DateTime!
  id: ID!
  summary: String!
  title: String!
  titleImg: String
}

type BlogConnection {
  pageInfo: PageInfo!
  edges: [BlogEdge]!
  aggregate: AggregateBlog!
}

input BlogCreateInput {
  authorImg: String!
  authorName: String!
  content: String!
  createdon: DateTime!
  id: ID
  summary: String!
  title: String!
  titleImg: String
}

type BlogEdge {
  node: Blog!
  cursor: String!
}

enum BlogOrderByInput {
  authorImg_ASC
  authorImg_DESC
  authorName_ASC
  authorName_DESC
  content_ASC
  content_DESC
  createdon_ASC
  createdon_DESC
  id_ASC
  id_DESC
  summary_ASC
  summary_DESC
  title_ASC
  title_DESC
  titleImg_ASC
  titleImg_DESC
}

type BlogPreviousValues {
  authorImg: String!
  authorName: String!
  content: String!
  createdon: DateTime!
  id: ID!
  summary: String!
  title: String!
  titleImg: String
}

type BlogSubscriptionPayload {
  mutation: MutationType!
  node: Blog
  updatedFields: [String!]
  previousValues: BlogPreviousValues
}

input BlogSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BlogWhereInput
  AND: [BlogSubscriptionWhereInput!]
  OR: [BlogSubscriptionWhereInput!]
  NOT: [BlogSubscriptionWhereInput!]
}

input BlogUpdateInput {
  authorImg: String
  authorName: String
  content: String
  createdon: DateTime
  summary: String
  title: String
  titleImg: String
}

input BlogUpdateManyMutationInput {
  authorImg: String
  authorName: String
  content: String
  createdon: DateTime
  summary: String
  title: String
  titleImg: String
}

input BlogWhereInput {
  authorImg: String
  authorImg_not: String
  authorImg_in: [String!]
  authorImg_not_in: [String!]
  authorImg_lt: String
  authorImg_lte: String
  authorImg_gt: String
  authorImg_gte: String
  authorImg_contains: String
  authorImg_not_contains: String
  authorImg_starts_with: String
  authorImg_not_starts_with: String
  authorImg_ends_with: String
  authorImg_not_ends_with: String
  authorName: String
  authorName_not: String
  authorName_in: [String!]
  authorName_not_in: [String!]
  authorName_lt: String
  authorName_lte: String
  authorName_gt: String
  authorName_gte: String
  authorName_contains: String
  authorName_not_contains: String
  authorName_starts_with: String
  authorName_not_starts_with: String
  authorName_ends_with: String
  authorName_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdon: DateTime
  createdon_not: DateTime
  createdon_in: [DateTime!]
  createdon_not_in: [DateTime!]
  createdon_lt: DateTime
  createdon_lte: DateTime
  createdon_gt: DateTime
  createdon_gte: DateTime
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  summary: String
  summary_not: String
  summary_in: [String!]
  summary_not_in: [String!]
  summary_lt: String
  summary_lte: String
  summary_gt: String
  summary_gte: String
  summary_contains: String
  summary_not_contains: String
  summary_starts_with: String
  summary_not_starts_with: String
  summary_ends_with: String
  summary_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  titleImg: String
  titleImg_not: String
  titleImg_in: [String!]
  titleImg_not_in: [String!]
  titleImg_lt: String
  titleImg_lte: String
  titleImg_gt: String
  titleImg_gte: String
  titleImg_contains: String
  titleImg_not_contains: String
  titleImg_starts_with: String
  titleImg_not_starts_with: String
  titleImg_ends_with: String
  titleImg_not_ends_with: String
  AND: [BlogWhereInput!]
  OR: [BlogWhereInput!]
  NOT: [BlogWhereInput!]
}

input BlogWhereUniqueInput {
  id: ID
}

type BrandTile {
  id: ID!
  type: String!
  imageurl: String
  order: Int
  restaurantses(where: RestaurantsWhereInput, orderBy: RestaurantsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Restaurants!]
  brandTileName: String!
}

type BrandTileConnection {
  pageInfo: PageInfo!
  edges: [BrandTileEdge]!
  aggregate: AggregateBrandTile!
}

input BrandTileCreateInput {
  id: ID
  type: String!
  imageurl: String
  order: Int
  restaurantses: RestaurantsCreateManyWithoutBrandTileInput
  brandTileName: String!
}

input BrandTileCreateOneWithoutRestaurantsesInput {
  create: BrandTileCreateWithoutRestaurantsesInput
  connect: BrandTileWhereUniqueInput
}

input BrandTileCreateWithoutRestaurantsesInput {
  id: ID
  type: String!
  imageurl: String
  order: Int
  brandTileName: String!
}

type BrandTileEdge {
  node: BrandTile!
  cursor: String!
}

enum BrandTileOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  imageurl_ASC
  imageurl_DESC
  order_ASC
  order_DESC
  brandTileName_ASC
  brandTileName_DESC
}

type BrandTilePreviousValues {
  id: ID!
  type: String!
  imageurl: String
  order: Int
  brandTileName: String!
}

type BrandTileSubscriptionPayload {
  mutation: MutationType!
  node: BrandTile
  updatedFields: [String!]
  previousValues: BrandTilePreviousValues
}

input BrandTileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BrandTileWhereInput
  AND: [BrandTileSubscriptionWhereInput!]
  OR: [BrandTileSubscriptionWhereInput!]
  NOT: [BrandTileSubscriptionWhereInput!]
}

input BrandTileUpdateInput {
  type: String
  imageurl: String
  order: Int
  restaurantses: RestaurantsUpdateManyWithoutBrandTileInput
  brandTileName: String
}

input BrandTileUpdateManyMutationInput {
  type: String
  imageurl: String
  order: Int
  brandTileName: String
}

input BrandTileUpdateOneWithoutRestaurantsesInput {
  create: BrandTileCreateWithoutRestaurantsesInput
  update: BrandTileUpdateWithoutRestaurantsesDataInput
  upsert: BrandTileUpsertWithoutRestaurantsesInput
  delete: Boolean
  disconnect: Boolean
  connect: BrandTileWhereUniqueInput
}

input BrandTileUpdateWithoutRestaurantsesDataInput {
  type: String
  imageurl: String
  order: Int
  brandTileName: String
}

input BrandTileUpsertWithoutRestaurantsesInput {
  update: BrandTileUpdateWithoutRestaurantsesDataInput!
  create: BrandTileCreateWithoutRestaurantsesInput!
}

input BrandTileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  imageurl: String
  imageurl_not: String
  imageurl_in: [String!]
  imageurl_not_in: [String!]
  imageurl_lt: String
  imageurl_lte: String
  imageurl_gt: String
  imageurl_gte: String
  imageurl_contains: String
  imageurl_not_contains: String
  imageurl_starts_with: String
  imageurl_not_starts_with: String
  imageurl_ends_with: String
  imageurl_not_ends_with: String
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  restaurantses_every: RestaurantsWhereInput
  restaurantses_some: RestaurantsWhereInput
  restaurantses_none: RestaurantsWhereInput
  brandTileName: String
  brandTileName_not: String
  brandTileName_in: [String!]
  brandTileName_not_in: [String!]
  brandTileName_lt: String
  brandTileName_lte: String
  brandTileName_gt: String
  brandTileName_gte: String
  brandTileName_contains: String
  brandTileName_not_contains: String
  brandTileName_starts_with: String
  brandTileName_not_starts_with: String
  brandTileName_ends_with: String
  brandTileName_not_ends_with: String
  AND: [BrandTileWhereInput!]
  OR: [BrandTileWhereInput!]
  NOT: [BrandTileWhereInput!]
}

input BrandTileWhereUniqueInput {
  id: ID
}

type city {
  city: String!
  isPremium: Boolean!
  id: ID!
  premiumAmmount90: Int!
  premiumAmmount180: Int!
  premiumAmmount360: Int!
  imageUrl: String
}

type cityConnection {
  pageInfo: PageInfo!
  edges: [cityEdge]!
  aggregate: Aggregatecity!
}

input cityCreateInput {
  city: String!
  isPremium: Boolean
  id: ID
  premiumAmmount90: Int
  premiumAmmount180: Int
  premiumAmmount360: Int
  imageUrl: String
}

input cityCreateOneInput {
  create: cityCreateInput
  connect: cityWhereUniqueInput
}

type cityEdge {
  node: city!
  cursor: String!
}

enum cityOrderByInput {
  city_ASC
  city_DESC
  isPremium_ASC
  isPremium_DESC
  id_ASC
  id_DESC
  premiumAmmount90_ASC
  premiumAmmount90_DESC
  premiumAmmount180_ASC
  premiumAmmount180_DESC
  premiumAmmount360_ASC
  premiumAmmount360_DESC
  imageUrl_ASC
  imageUrl_DESC
}

type cityPreviousValues {
  city: String!
  isPremium: Boolean!
  id: ID!
  premiumAmmount90: Int!
  premiumAmmount180: Int!
  premiumAmmount360: Int!
  imageUrl: String
}

type citySubscriptionPayload {
  mutation: MutationType!
  node: city
  updatedFields: [String!]
  previousValues: cityPreviousValues
}

input citySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: cityWhereInput
  AND: [citySubscriptionWhereInput!]
  OR: [citySubscriptionWhereInput!]
  NOT: [citySubscriptionWhereInput!]
}

input cityUpdateDataInput {
  city: String
  isPremium: Boolean
  premiumAmmount90: Int
  premiumAmmount180: Int
  premiumAmmount360: Int
  imageUrl: String
}

input cityUpdateInput {
  city: String
  isPremium: Boolean
  premiumAmmount90: Int
  premiumAmmount180: Int
  premiumAmmount360: Int
  imageUrl: String
}

input cityUpdateManyMutationInput {
  city: String
  isPremium: Boolean
  premiumAmmount90: Int
  premiumAmmount180: Int
  premiumAmmount360: Int
  imageUrl: String
}

input cityUpdateOneRequiredInput {
  create: cityCreateInput
  update: cityUpdateDataInput
  upsert: cityUpsertNestedInput
  connect: cityWhereUniqueInput
}

input cityUpsertNestedInput {
  update: cityUpdateDataInput!
  create: cityCreateInput!
}

input cityWhereInput {
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  isPremium: Boolean
  isPremium_not: Boolean
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  premiumAmmount90: Int
  premiumAmmount90_not: Int
  premiumAmmount90_in: [Int!]
  premiumAmmount90_not_in: [Int!]
  premiumAmmount90_lt: Int
  premiumAmmount90_lte: Int
  premiumAmmount90_gt: Int
  premiumAmmount90_gte: Int
  premiumAmmount180: Int
  premiumAmmount180_not: Int
  premiumAmmount180_in: [Int!]
  premiumAmmount180_not_in: [Int!]
  premiumAmmount180_lt: Int
  premiumAmmount180_lte: Int
  premiumAmmount180_gt: Int
  premiumAmmount180_gte: Int
  premiumAmmount360: Int
  premiumAmmount360_not: Int
  premiumAmmount360_in: [Int!]
  premiumAmmount360_not_in: [Int!]
  premiumAmmount360_lt: Int
  premiumAmmount360_lte: Int
  premiumAmmount360_gt: Int
  premiumAmmount360_gte: Int
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  AND: [cityWhereInput!]
  OR: [cityWhereInput!]
  NOT: [cityWhereInput!]
}

input cityWhereUniqueInput {
  id: ID
}

type Contacts {
  id: ID!
  phoneNumber: String
  name: String
  address: String
  email: String
}

type ContactsConnection {
  pageInfo: PageInfo!
  edges: [ContactsEdge]!
  aggregate: AggregateContacts!
}

input ContactsCreateInput {
  id: ID
  phoneNumber: String
  name: String
  address: String
  email: String
}

type ContactsEdge {
  node: Contacts!
  cursor: String!
}

enum ContactsOrderByInput {
  id_ASC
  id_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  name_ASC
  name_DESC
  address_ASC
  address_DESC
  email_ASC
  email_DESC
}

type ContactsPreviousValues {
  id: ID!
  phoneNumber: String
  name: String
  address: String
  email: String
}

type ContactsSubscriptionPayload {
  mutation: MutationType!
  node: Contacts
  updatedFields: [String!]
  previousValues: ContactsPreviousValues
}

input ContactsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ContactsWhereInput
  AND: [ContactsSubscriptionWhereInput!]
  OR: [ContactsSubscriptionWhereInput!]
  NOT: [ContactsSubscriptionWhereInput!]
}

input ContactsUpdateInput {
  phoneNumber: String
  name: String
  address: String
  email: String
}

input ContactsUpdateManyMutationInput {
  phoneNumber: String
  name: String
  address: String
  email: String
}

input ContactsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  AND: [ContactsWhereInput!]
  OR: [ContactsWhereInput!]
  NOT: [ContactsWhereInput!]
}

input ContactsWhereUniqueInput {
  id: ID
}

scalar DateTime

type File {
  contentType: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  secret: String!
  size: Int!
  updatedAt: DateTime!
  url: String!
}

type FileConnection {
  pageInfo: PageInfo!
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  contentType: String!
  id: ID
  name: String!
  secret: String!
  size: Int!
  url: String!
}

type FileEdge {
  node: File!
  cursor: String!
}

enum FileOrderByInput {
  contentType_ASC
  contentType_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  secret_ASC
  secret_DESC
  size_ASC
  size_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
}

type FilePreviousValues {
  contentType: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  secret: String!
  size: Int!
  updatedAt: DateTime!
  url: String!
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FileWhereInput
  AND: [FileSubscriptionWhereInput!]
  OR: [FileSubscriptionWhereInput!]
  NOT: [FileSubscriptionWhereInput!]
}

input FileUpdateInput {
  contentType: String
  name: String
  secret: String
  size: Int
  url: String
}

input FileUpdateManyMutationInput {
  contentType: String
  name: String
  secret: String
  size: Int
  url: String
}

input FileWhereInput {
  contentType: String
  contentType_not: String
  contentType_in: [String!]
  contentType_not_in: [String!]
  contentType_lt: String
  contentType_lte: String
  contentType_gt: String
  contentType_gte: String
  contentType_contains: String
  contentType_not_contains: String
  contentType_starts_with: String
  contentType_not_starts_with: String
  contentType_ends_with: String
  contentType_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  secret: String
  secret_not: String
  secret_in: [String!]
  secret_not_in: [String!]
  secret_lt: String
  secret_lte: String
  secret_gt: String
  secret_gte: String
  secret_contains: String
  secret_not_contains: String
  secret_starts_with: String
  secret_not_starts_with: String
  secret_ends_with: String
  secret_not_ends_with: String
  size: Int
  size_not: Int
  size_in: [Int!]
  size_not_in: [Int!]
  size_lt: Int
  size_lte: Int
  size_gt: Int
  size_gte: Int
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
}

input FileWhereUniqueInput {
  id: ID
  secret: String
  url: String
}

type Friday {
  exhausted: Boolean!
  id: ID!
  restaurants: Restaurants
  timeDiscounts(where: TimeDiscountWhereInput, orderBy: TimeDiscountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeDiscount!]
  order: Int
}

type FridayConnection {
  pageInfo: PageInfo!
  edges: [FridayEdge]!
  aggregate: AggregateFriday!
}

input FridayCreateInput {
  exhausted: Boolean
  id: ID
  restaurants: RestaurantsCreateOneWithoutFridayInput
  timeDiscounts: TimeDiscountCreateManyWithoutFridayInput
  order: Int
}

input FridayCreateOneWithoutRestaurantsInput {
  create: FridayCreateWithoutRestaurantsInput
  connect: FridayWhereUniqueInput
}

input FridayCreateOneWithoutTimeDiscountsInput {
  create: FridayCreateWithoutTimeDiscountsInput
  connect: FridayWhereUniqueInput
}

input FridayCreateWithoutRestaurantsInput {
  exhausted: Boolean
  id: ID
  timeDiscounts: TimeDiscountCreateManyWithoutFridayInput
  order: Int
}

input FridayCreateWithoutTimeDiscountsInput {
  exhausted: Boolean
  id: ID
  restaurants: RestaurantsCreateOneWithoutFridayInput
  order: Int
}

type FridayEdge {
  node: Friday!
  cursor: String!
}

enum FridayOrderByInput {
  exhausted_ASC
  exhausted_DESC
  id_ASC
  id_DESC
  order_ASC
  order_DESC
}

type FridayPreviousValues {
  exhausted: Boolean!
  id: ID!
  order: Int
}

type FridaySubscriptionPayload {
  mutation: MutationType!
  node: Friday
  updatedFields: [String!]
  previousValues: FridayPreviousValues
}

input FridaySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FridayWhereInput
  AND: [FridaySubscriptionWhereInput!]
  OR: [FridaySubscriptionWhereInput!]
  NOT: [FridaySubscriptionWhereInput!]
}

input FridayUpdateInput {
  exhausted: Boolean
  restaurants: RestaurantsUpdateOneWithoutFridayInput
  timeDiscounts: TimeDiscountUpdateManyWithoutFridayInput
  order: Int
}

input FridayUpdateManyMutationInput {
  exhausted: Boolean
  order: Int
}

input FridayUpdateOneWithoutRestaurantsInput {
  create: FridayCreateWithoutRestaurantsInput
  update: FridayUpdateWithoutRestaurantsDataInput
  upsert: FridayUpsertWithoutRestaurantsInput
  delete: Boolean
  disconnect: Boolean
  connect: FridayWhereUniqueInput
}

input FridayUpdateOneWithoutTimeDiscountsInput {
  create: FridayCreateWithoutTimeDiscountsInput
  update: FridayUpdateWithoutTimeDiscountsDataInput
  upsert: FridayUpsertWithoutTimeDiscountsInput
  delete: Boolean
  disconnect: Boolean
  connect: FridayWhereUniqueInput
}

input FridayUpdateWithoutRestaurantsDataInput {
  exhausted: Boolean
  timeDiscounts: TimeDiscountUpdateManyWithoutFridayInput
  order: Int
}

input FridayUpdateWithoutTimeDiscountsDataInput {
  exhausted: Boolean
  restaurants: RestaurantsUpdateOneWithoutFridayInput
  order: Int
}

input FridayUpsertWithoutRestaurantsInput {
  update: FridayUpdateWithoutRestaurantsDataInput!
  create: FridayCreateWithoutRestaurantsInput!
}

input FridayUpsertWithoutTimeDiscountsInput {
  update: FridayUpdateWithoutTimeDiscountsDataInput!
  create: FridayCreateWithoutTimeDiscountsInput!
}

input FridayWhereInput {
  exhausted: Boolean
  exhausted_not: Boolean
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  restaurants: RestaurantsWhereInput
  timeDiscounts_every: TimeDiscountWhereInput
  timeDiscounts_some: TimeDiscountWhereInput
  timeDiscounts_none: TimeDiscountWhereInput
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  AND: [FridayWhereInput!]
  OR: [FridayWhereInput!]
  NOT: [FridayWhereInput!]
}

input FridayWhereUniqueInput {
  id: ID
}

type HotDeals {
  id: ID!
  type: String!
  restaurantses(where: RestaurantsWhereInput, orderBy: RestaurantsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Restaurants!]
  imageurl: String
}

type HotDealsConnection {
  pageInfo: PageInfo!
  edges: [HotDealsEdge]!
  aggregate: AggregateHotDeals!
}

input HotDealsCreateInput {
  id: ID
  type: String!
  restaurantses: RestaurantsCreateManyWithoutHotDealsesInput
  imageurl: String
}

input HotDealsCreateManyWithoutRestaurantsesInput {
  create: [HotDealsCreateWithoutRestaurantsesInput!]
  connect: [HotDealsWhereUniqueInput!]
}

input HotDealsCreateWithoutRestaurantsesInput {
  id: ID
  type: String!
  imageurl: String
}

type HotDealsEdge {
  node: HotDeals!
  cursor: String!
}

enum HotDealsOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  imageurl_ASC
  imageurl_DESC
}

type HotDealsPreviousValues {
  id: ID!
  type: String!
  imageurl: String
}

input HotDealsScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  imageurl: String
  imageurl_not: String
  imageurl_in: [String!]
  imageurl_not_in: [String!]
  imageurl_lt: String
  imageurl_lte: String
  imageurl_gt: String
  imageurl_gte: String
  imageurl_contains: String
  imageurl_not_contains: String
  imageurl_starts_with: String
  imageurl_not_starts_with: String
  imageurl_ends_with: String
  imageurl_not_ends_with: String
  AND: [HotDealsScalarWhereInput!]
  OR: [HotDealsScalarWhereInput!]
  NOT: [HotDealsScalarWhereInput!]
}

type HotDealsSubscriptionPayload {
  mutation: MutationType!
  node: HotDeals
  updatedFields: [String!]
  previousValues: HotDealsPreviousValues
}

input HotDealsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HotDealsWhereInput
  AND: [HotDealsSubscriptionWhereInput!]
  OR: [HotDealsSubscriptionWhereInput!]
  NOT: [HotDealsSubscriptionWhereInput!]
}

input HotDealsUpdateInput {
  type: String
  restaurantses: RestaurantsUpdateManyWithoutHotDealsesInput
  imageurl: String
}

input HotDealsUpdateManyDataInput {
  type: String
  imageurl: String
}

input HotDealsUpdateManyMutationInput {
  type: String
  imageurl: String
}

input HotDealsUpdateManyWithoutRestaurantsesInput {
  create: [HotDealsCreateWithoutRestaurantsesInput!]
  delete: [HotDealsWhereUniqueInput!]
  connect: [HotDealsWhereUniqueInput!]
  set: [HotDealsWhereUniqueInput!]
  disconnect: [HotDealsWhereUniqueInput!]
  update: [HotDealsUpdateWithWhereUniqueWithoutRestaurantsesInput!]
  upsert: [HotDealsUpsertWithWhereUniqueWithoutRestaurantsesInput!]
  deleteMany: [HotDealsScalarWhereInput!]
  updateMany: [HotDealsUpdateManyWithWhereNestedInput!]
}

input HotDealsUpdateManyWithWhereNestedInput {
  where: HotDealsScalarWhereInput!
  data: HotDealsUpdateManyDataInput!
}

input HotDealsUpdateWithoutRestaurantsesDataInput {
  type: String
  imageurl: String
}

input HotDealsUpdateWithWhereUniqueWithoutRestaurantsesInput {
  where: HotDealsWhereUniqueInput!
  data: HotDealsUpdateWithoutRestaurantsesDataInput!
}

input HotDealsUpsertWithWhereUniqueWithoutRestaurantsesInput {
  where: HotDealsWhereUniqueInput!
  update: HotDealsUpdateWithoutRestaurantsesDataInput!
  create: HotDealsCreateWithoutRestaurantsesInput!
}

input HotDealsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  restaurantses_every: RestaurantsWhereInput
  restaurantses_some: RestaurantsWhereInput
  restaurantses_none: RestaurantsWhereInput
  imageurl: String
  imageurl_not: String
  imageurl_in: [String!]
  imageurl_not_in: [String!]
  imageurl_lt: String
  imageurl_lte: String
  imageurl_gt: String
  imageurl_gte: String
  imageurl_contains: String
  imageurl_not_contains: String
  imageurl_starts_with: String
  imageurl_not_starts_with: String
  imageurl_ends_with: String
  imageurl_not_ends_with: String
  AND: [HotDealsWhereInput!]
  OR: [HotDealsWhereInput!]
  NOT: [HotDealsWhereInput!]
}

input HotDealsWhereUniqueInput {
  id: ID
  type: String
}

scalar Json

scalar Long

type Misc {
  faq: String
  fup: String
  id: ID!
}

type MiscConnection {
  pageInfo: PageInfo!
  edges: [MiscEdge]!
  aggregate: AggregateMisc!
}

input MiscCreateInput {
  faq: String
  fup: String
  id: ID
}

type MiscEdge {
  node: Misc!
  cursor: String!
}

enum MiscOrderByInput {
  faq_ASC
  faq_DESC
  fup_ASC
  fup_DESC
  id_ASC
  id_DESC
}

type MiscPreviousValues {
  faq: String
  fup: String
  id: ID!
}

type MiscSubscriptionPayload {
  mutation: MutationType!
  node: Misc
  updatedFields: [String!]
  previousValues: MiscPreviousValues
}

input MiscSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MiscWhereInput
  AND: [MiscSubscriptionWhereInput!]
  OR: [MiscSubscriptionWhereInput!]
  NOT: [MiscSubscriptionWhereInput!]
}

input MiscUpdateInput {
  faq: String
  fup: String
}

input MiscUpdateManyMutationInput {
  faq: String
  fup: String
}

input MiscWhereInput {
  faq: String
  faq_not: String
  faq_in: [String!]
  faq_not_in: [String!]
  faq_lt: String
  faq_lte: String
  faq_gt: String
  faq_gte: String
  faq_contains: String
  faq_not_contains: String
  faq_starts_with: String
  faq_not_starts_with: String
  faq_ends_with: String
  faq_not_ends_with: String
  fup: String
  fup_not: String
  fup_in: [String!]
  fup_not_in: [String!]
  fup_lt: String
  fup_lte: String
  fup_gt: String
  fup_gte: String
  fup_contains: String
  fup_not_contains: String
  fup_starts_with: String
  fup_not_starts_with: String
  fup_ends_with: String
  fup_not_ends_with: String
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [MiscWhereInput!]
  OR: [MiscWhereInput!]
  NOT: [MiscWhereInput!]
}

input MiscWhereUniqueInput {
  id: ID
}

type Monday {
  id: ID!
  exhausted: Boolean
  restaurants: Restaurants
  timeDiscounts(where: TimeDiscountWhereInput, orderBy: TimeDiscountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeDiscount!]
  order: Int
}

type MondayConnection {
  pageInfo: PageInfo!
  edges: [MondayEdge]!
  aggregate: AggregateMonday!
}

input MondayCreateInput {
  id: ID
  exhausted: Boolean
  restaurants: RestaurantsCreateOneWithoutMondayInput
  timeDiscounts: TimeDiscountCreateManyWithoutMondayInput
  order: Int
}

input MondayCreateOneWithoutRestaurantsInput {
  create: MondayCreateWithoutRestaurantsInput
  connect: MondayWhereUniqueInput
}

input MondayCreateOneWithoutTimeDiscountsInput {
  create: MondayCreateWithoutTimeDiscountsInput
  connect: MondayWhereUniqueInput
}

input MondayCreateWithoutRestaurantsInput {
  id: ID
  exhausted: Boolean
  timeDiscounts: TimeDiscountCreateManyWithoutMondayInput
  order: Int
}

input MondayCreateWithoutTimeDiscountsInput {
  id: ID
  exhausted: Boolean
  restaurants: RestaurantsCreateOneWithoutMondayInput
  order: Int
}

type MondayEdge {
  node: Monday!
  cursor: String!
}

enum MondayOrderByInput {
  id_ASC
  id_DESC
  exhausted_ASC
  exhausted_DESC
  order_ASC
  order_DESC
}

type MondayPreviousValues {
  id: ID!
  exhausted: Boolean
  order: Int
}

type MondaySubscriptionPayload {
  mutation: MutationType!
  node: Monday
  updatedFields: [String!]
  previousValues: MondayPreviousValues
}

input MondaySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MondayWhereInput
  AND: [MondaySubscriptionWhereInput!]
  OR: [MondaySubscriptionWhereInput!]
  NOT: [MondaySubscriptionWhereInput!]
}

input MondayUpdateInput {
  exhausted: Boolean
  restaurants: RestaurantsUpdateOneWithoutMondayInput
  timeDiscounts: TimeDiscountUpdateManyWithoutMondayInput
  order: Int
}

input MondayUpdateManyMutationInput {
  exhausted: Boolean
  order: Int
}

input MondayUpdateOneWithoutRestaurantsInput {
  create: MondayCreateWithoutRestaurantsInput
  update: MondayUpdateWithoutRestaurantsDataInput
  upsert: MondayUpsertWithoutRestaurantsInput
  delete: Boolean
  disconnect: Boolean
  connect: MondayWhereUniqueInput
}

input MondayUpdateOneWithoutTimeDiscountsInput {
  create: MondayCreateWithoutTimeDiscountsInput
  update: MondayUpdateWithoutTimeDiscountsDataInput
  upsert: MondayUpsertWithoutTimeDiscountsInput
  delete: Boolean
  disconnect: Boolean
  connect: MondayWhereUniqueInput
}

input MondayUpdateWithoutRestaurantsDataInput {
  exhausted: Boolean
  timeDiscounts: TimeDiscountUpdateManyWithoutMondayInput
  order: Int
}

input MondayUpdateWithoutTimeDiscountsDataInput {
  exhausted: Boolean
  restaurants: RestaurantsUpdateOneWithoutMondayInput
  order: Int
}

input MondayUpsertWithoutRestaurantsInput {
  update: MondayUpdateWithoutRestaurantsDataInput!
  create: MondayCreateWithoutRestaurantsInput!
}

input MondayUpsertWithoutTimeDiscountsInput {
  update: MondayUpdateWithoutTimeDiscountsDataInput!
  create: MondayCreateWithoutTimeDiscountsInput!
}

input MondayWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  exhausted: Boolean
  exhausted_not: Boolean
  restaurants: RestaurantsWhereInput
  timeDiscounts_every: TimeDiscountWhereInput
  timeDiscounts_some: TimeDiscountWhereInput
  timeDiscounts_none: TimeDiscountWhereInput
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  AND: [MondayWhereInput!]
  OR: [MondayWhereInput!]
  NOT: [MondayWhereInput!]
}

input MondayWhereUniqueInput {
  id: ID
}

type Mutation {
  createAds(data: AdsCreateInput!): Ads!
  updateAds(data: AdsUpdateInput!, where: AdsWhereUniqueInput!): Ads
  updateManyAdses(data: AdsUpdateManyMutationInput!, where: AdsWhereInput): BatchPayload!
  upsertAds(where: AdsWhereUniqueInput!, create: AdsCreateInput!, update: AdsUpdateInput!): Ads!
  deleteAds(where: AdsWhereUniqueInput!): Ads
  deleteManyAdses(where: AdsWhereInput): BatchPayload!
  createBlog(data: BlogCreateInput!): Blog!
  updateBlog(data: BlogUpdateInput!, where: BlogWhereUniqueInput!): Blog
  updateManyBlogs(data: BlogUpdateManyMutationInput!, where: BlogWhereInput): BatchPayload!
  upsertBlog(where: BlogWhereUniqueInput!, create: BlogCreateInput!, update: BlogUpdateInput!): Blog!
  deleteBlog(where: BlogWhereUniqueInput!): Blog
  deleteManyBlogs(where: BlogWhereInput): BatchPayload!
  createBrandTile(data: BrandTileCreateInput!): BrandTile!
  updateBrandTile(data: BrandTileUpdateInput!, where: BrandTileWhereUniqueInput!): BrandTile
  updateManyBrandTiles(data: BrandTileUpdateManyMutationInput!, where: BrandTileWhereInput): BatchPayload!
  upsertBrandTile(where: BrandTileWhereUniqueInput!, create: BrandTileCreateInput!, update: BrandTileUpdateInput!): BrandTile!
  deleteBrandTile(where: BrandTileWhereUniqueInput!): BrandTile
  deleteManyBrandTiles(where: BrandTileWhereInput): BatchPayload!
  createContacts(data: ContactsCreateInput!): Contacts!
  updateContacts(data: ContactsUpdateInput!, where: ContactsWhereUniqueInput!): Contacts
  updateManyContactses(data: ContactsUpdateManyMutationInput!, where: ContactsWhereInput): BatchPayload!
  upsertContacts(where: ContactsWhereUniqueInput!, create: ContactsCreateInput!, update: ContactsUpdateInput!): Contacts!
  deleteContacts(where: ContactsWhereUniqueInput!): Contacts
  deleteManyContactses(where: ContactsWhereInput): BatchPayload!
  createFile(data: FileCreateInput!): File!
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  deleteFile(where: FileWhereUniqueInput!): File
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  createFriday(data: FridayCreateInput!): Friday!
  updateFriday(data: FridayUpdateInput!, where: FridayWhereUniqueInput!): Friday
  updateManyFridays(data: FridayUpdateManyMutationInput!, where: FridayWhereInput): BatchPayload!
  upsertFriday(where: FridayWhereUniqueInput!, create: FridayCreateInput!, update: FridayUpdateInput!): Friday!
  deleteFriday(where: FridayWhereUniqueInput!): Friday
  deleteManyFridays(where: FridayWhereInput): BatchPayload!
  createHotDeals(data: HotDealsCreateInput!): HotDeals!
  updateHotDeals(data: HotDealsUpdateInput!, where: HotDealsWhereUniqueInput!): HotDeals
  updateManyHotDealses(data: HotDealsUpdateManyMutationInput!, where: HotDealsWhereInput): BatchPayload!
  upsertHotDeals(where: HotDealsWhereUniqueInput!, create: HotDealsCreateInput!, update: HotDealsUpdateInput!): HotDeals!
  deleteHotDeals(where: HotDealsWhereUniqueInput!): HotDeals
  deleteManyHotDealses(where: HotDealsWhereInput): BatchPayload!
  createMisc(data: MiscCreateInput!): Misc!
  updateMisc(data: MiscUpdateInput!, where: MiscWhereUniqueInput!): Misc
  updateManyMiscs(data: MiscUpdateManyMutationInput!, where: MiscWhereInput): BatchPayload!
  upsertMisc(where: MiscWhereUniqueInput!, create: MiscCreateInput!, update: MiscUpdateInput!): Misc!
  deleteMisc(where: MiscWhereUniqueInput!): Misc
  deleteManyMiscs(where: MiscWhereInput): BatchPayload!
  createMonday(data: MondayCreateInput!): Monday!
  updateMonday(data: MondayUpdateInput!, where: MondayWhereUniqueInput!): Monday
  updateManyMondays(data: MondayUpdateManyMutationInput!, where: MondayWhereInput): BatchPayload!
  upsertMonday(where: MondayWhereUniqueInput!, create: MondayCreateInput!, update: MondayUpdateInput!): Monday!
  deleteMonday(where: MondayWhereUniqueInput!): Monday
  deleteManyMondays(where: MondayWhereInput): BatchPayload!
  createOrders(data: OrdersCreateInput!): Orders!
  updateOrders(data: OrdersUpdateInput!, where: OrdersWhereUniqueInput!): Orders
  updateManyOrderses(data: OrdersUpdateManyMutationInput!, where: OrdersWhereInput): BatchPayload!
  upsertOrders(where: OrdersWhereUniqueInput!, create: OrdersCreateInput!, update: OrdersUpdateInput!): Orders!
  deleteOrders(where: OrdersWhereUniqueInput!): Orders
  deleteManyOrderses(where: OrdersWhereInput): BatchPayload!
  createRenoPass(data: RenoPassCreateInput!): RenoPass!
  updateRenoPass(data: RenoPassUpdateInput!, where: RenoPassWhereUniqueInput!): RenoPass
  updateManyRenoPasses(data: RenoPassUpdateManyMutationInput!, where: RenoPassWhereInput): BatchPayload!
  upsertRenoPass(where: RenoPassWhereUniqueInput!, create: RenoPassCreateInput!, update: RenoPassUpdateInput!): RenoPass!
  deleteRenoPass(where: RenoPassWhereUniqueInput!): RenoPass
  deleteManyRenoPasses(where: RenoPassWhereInput): BatchPayload!
  createRestaurantType(data: RestaurantTypeCreateInput!): RestaurantType!
  updateRestaurantType(data: RestaurantTypeUpdateInput!, where: RestaurantTypeWhereUniqueInput!): RestaurantType
  updateManyRestaurantTypes(data: RestaurantTypeUpdateManyMutationInput!, where: RestaurantTypeWhereInput): BatchPayload!
  upsertRestaurantType(where: RestaurantTypeWhereUniqueInput!, create: RestaurantTypeCreateInput!, update: RestaurantTypeUpdateInput!): RestaurantType!
  deleteRestaurantType(where: RestaurantTypeWhereUniqueInput!): RestaurantType
  deleteManyRestaurantTypes(where: RestaurantTypeWhereInput): BatchPayload!
  createRestaurants(data: RestaurantsCreateInput!): Restaurants!
  updateRestaurants(data: RestaurantsUpdateInput!, where: RestaurantsWhereUniqueInput!): Restaurants
  updateManyRestaurantses(data: RestaurantsUpdateManyMutationInput!, where: RestaurantsWhereInput): BatchPayload!
  upsertRestaurants(where: RestaurantsWhereUniqueInput!, create: RestaurantsCreateInput!, update: RestaurantsUpdateInput!): Restaurants!
  deleteRestaurants(where: RestaurantsWhereUniqueInput!): Restaurants
  deleteManyRestaurantses(where: RestaurantsWhereInput): BatchPayload!
  createSaturday(data: SaturdayCreateInput!): Saturday!
  updateSaturday(data: SaturdayUpdateInput!, where: SaturdayWhereUniqueInput!): Saturday
  updateManySaturdays(data: SaturdayUpdateManyMutationInput!, where: SaturdayWhereInput): BatchPayload!
  upsertSaturday(where: SaturdayWhereUniqueInput!, create: SaturdayCreateInput!, update: SaturdayUpdateInput!): Saturday!
  deleteSaturday(where: SaturdayWhereUniqueInput!): Saturday
  deleteManySaturdays(where: SaturdayWhereInput): BatchPayload!
  createSunday(data: SundayCreateInput!): Sunday!
  updateSunday(data: SundayUpdateInput!, where: SundayWhereUniqueInput!): Sunday
  updateManySundays(data: SundayUpdateManyMutationInput!, where: SundayWhereInput): BatchPayload!
  upsertSunday(where: SundayWhereUniqueInput!, create: SundayCreateInput!, update: SundayUpdateInput!): Sunday!
  deleteSunday(where: SundayWhereUniqueInput!): Sunday
  deleteManySundays(where: SundayWhereInput): BatchPayload!
  createThursday(data: ThursdayCreateInput!): Thursday!
  updateThursday(data: ThursdayUpdateInput!, where: ThursdayWhereUniqueInput!): Thursday
  updateManyThursdays(data: ThursdayUpdateManyMutationInput!, where: ThursdayWhereInput): BatchPayload!
  upsertThursday(where: ThursdayWhereUniqueInput!, create: ThursdayCreateInput!, update: ThursdayUpdateInput!): Thursday!
  deleteThursday(where: ThursdayWhereUniqueInput!): Thursday
  deleteManyThursdays(where: ThursdayWhereInput): BatchPayload!
  createTimeDiscount(data: TimeDiscountCreateInput!): TimeDiscount!
  updateTimeDiscount(data: TimeDiscountUpdateInput!, where: TimeDiscountWhereUniqueInput!): TimeDiscount
  updateManyTimeDiscounts(data: TimeDiscountUpdateManyMutationInput!, where: TimeDiscountWhereInput): BatchPayload!
  upsertTimeDiscount(where: TimeDiscountWhereUniqueInput!, create: TimeDiscountCreateInput!, update: TimeDiscountUpdateInput!): TimeDiscount!
  deleteTimeDiscount(where: TimeDiscountWhereUniqueInput!): TimeDiscount
  deleteManyTimeDiscounts(where: TimeDiscountWhereInput): BatchPayload!
  createTuesday(data: TuesdayCreateInput!): Tuesday!
  updateTuesday(data: TuesdayUpdateInput!, where: TuesdayWhereUniqueInput!): Tuesday
  updateManyTuesdays(data: TuesdayUpdateManyMutationInput!, where: TuesdayWhereInput): BatchPayload!
  upsertTuesday(where: TuesdayWhereUniqueInput!, create: TuesdayCreateInput!, update: TuesdayUpdateInput!): Tuesday!
  deleteTuesday(where: TuesdayWhereUniqueInput!): Tuesday
  deleteManyTuesdays(where: TuesdayWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createUserReviews(data: UserReviewsCreateInput!): UserReviews!
  updateUserReviews(data: UserReviewsUpdateInput!, where: UserReviewsWhereUniqueInput!): UserReviews
  updateManyUserReviewses(data: UserReviewsUpdateManyMutationInput!, where: UserReviewsWhereInput): BatchPayload!
  upsertUserReviews(where: UserReviewsWhereUniqueInput!, create: UserReviewsCreateInput!, update: UserReviewsUpdateInput!): UserReviews!
  deleteUserReviews(where: UserReviewsWhereUniqueInput!): UserReviews
  deleteManyUserReviewses(where: UserReviewsWhereInput): BatchPayload!
  createWednesday(data: WednesdayCreateInput!): Wednesday!
  updateWednesday(data: WednesdayUpdateInput!, where: WednesdayWhereUniqueInput!): Wednesday
  updateManyWednesdays(data: WednesdayUpdateManyMutationInput!, where: WednesdayWhereInput): BatchPayload!
  upsertWednesday(where: WednesdayWhereUniqueInput!, create: WednesdayCreateInput!, update: WednesdayUpdateInput!): Wednesday!
  deleteWednesday(where: WednesdayWhereUniqueInput!): Wednesday
  deleteManyWednesdays(where: WednesdayWhereInput): BatchPayload!
  createcity(data: cityCreateInput!): city!
  updatecity(data: cityUpdateInput!, where: cityWhereUniqueInput!): city
  updateManycities(data: cityUpdateManyMutationInput!, where: cityWhereInput): BatchPayload!
  upsertcity(where: cityWhereUniqueInput!, create: cityCreateInput!, update: cityUpdateInput!): city!
  deletecity(where: cityWhereUniqueInput!): city
  deleteManycities(where: cityWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Orders {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID!
  restaurants: Restaurants
  timeDiscount: TimeDiscount
  user: User!
  date: DateTime!
  totalDiscount: Int!
  people: Int!
  bookingid: String!
  mobile: String!
  unlockActive: Boolean!
  name: String!
  geolocation: String
  referrer: String
  confirmed: Boolean
  cancelled: Boolean!
  amount: Int
  receipt: String
  paymentId: String
  paymentOrderId: String
  paymentDescription: String
  hasPaymentDispute: Boolean
}

type OrdersConnection {
  pageInfo: PageInfo!
  edges: [OrdersEdge]!
  aggregate: AggregateOrders!
}

input OrdersCreateInput {
  id: ID
  restaurants: RestaurantsCreateOneWithoutOrdersesInput
  timeDiscount: TimeDiscountCreateOneWithoutOrdersesInput
  user: UserCreateOneWithoutOrdersesInput!
  date: DateTime!
  totalDiscount: Int
  people: Int!
  bookingid: String!
  mobile: String!
  unlockActive: Boolean
  name: String!
  geolocation: String
  referrer: String
  confirmed: Boolean
  cancelled: Boolean
  amount: Int
  receipt: String
  paymentId: String
  paymentOrderId: String
  paymentDescription: String
  hasPaymentDispute: Boolean
}

input OrdersCreateManyWithoutRestaurantsInput {
  create: [OrdersCreateWithoutRestaurantsInput!]
  connect: [OrdersWhereUniqueInput!]
}

input OrdersCreateManyWithoutTimeDiscountInput {
  create: [OrdersCreateWithoutTimeDiscountInput!]
  connect: [OrdersWhereUniqueInput!]
}

input OrdersCreateManyWithoutUserInput {
  create: [OrdersCreateWithoutUserInput!]
  connect: [OrdersWhereUniqueInput!]
}

input OrdersCreateWithoutRestaurantsInput {
  id: ID
  timeDiscount: TimeDiscountCreateOneWithoutOrdersesInput
  user: UserCreateOneWithoutOrdersesInput!
  date: DateTime!
  totalDiscount: Int
  people: Int!
  bookingid: String!
  mobile: String!
  unlockActive: Boolean
  name: String!
  geolocation: String
  referrer: String
  confirmed: Boolean
  cancelled: Boolean
  amount: Int
  receipt: String
  paymentId: String
  paymentOrderId: String
  paymentDescription: String
  hasPaymentDispute: Boolean
}

input OrdersCreateWithoutTimeDiscountInput {
  id: ID
  restaurants: RestaurantsCreateOneWithoutOrdersesInput
  user: UserCreateOneWithoutOrdersesInput!
  date: DateTime!
  totalDiscount: Int
  people: Int!
  bookingid: String!
  mobile: String!
  unlockActive: Boolean
  name: String!
  geolocation: String
  referrer: String
  confirmed: Boolean
  cancelled: Boolean
  amount: Int
  receipt: String
  paymentId: String
  paymentOrderId: String
  paymentDescription: String
  hasPaymentDispute: Boolean
}

input OrdersCreateWithoutUserInput {
  id: ID
  restaurants: RestaurantsCreateOneWithoutOrdersesInput
  timeDiscount: TimeDiscountCreateOneWithoutOrdersesInput
  date: DateTime!
  totalDiscount: Int
  people: Int!
  bookingid: String!
  mobile: String!
  unlockActive: Boolean
  name: String!
  geolocation: String
  referrer: String
  confirmed: Boolean
  cancelled: Boolean
  amount: Int
  receipt: String
  paymentId: String
  paymentOrderId: String
  paymentDescription: String
  hasPaymentDispute: Boolean
}

type OrdersEdge {
  node: Orders!
  cursor: String!
}

enum OrdersOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  totalDiscount_ASC
  totalDiscount_DESC
  people_ASC
  people_DESC
  bookingid_ASC
  bookingid_DESC
  mobile_ASC
  mobile_DESC
  unlockActive_ASC
  unlockActive_DESC
  name_ASC
  name_DESC
  geolocation_ASC
  geolocation_DESC
  referrer_ASC
  referrer_DESC
  confirmed_ASC
  confirmed_DESC
  cancelled_ASC
  cancelled_DESC
  amount_ASC
  amount_DESC
  receipt_ASC
  receipt_DESC
  paymentId_ASC
  paymentId_DESC
  paymentOrderId_ASC
  paymentOrderId_DESC
  paymentDescription_ASC
  paymentDescription_DESC
  hasPaymentDispute_ASC
  hasPaymentDispute_DESC
}

type OrdersPreviousValues {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID!
  date: DateTime!
  totalDiscount: Int!
  people: Int!
  bookingid: String!
  mobile: String!
  unlockActive: Boolean!
  name: String!
  geolocation: String
  referrer: String
  confirmed: Boolean
  cancelled: Boolean!
  amount: Int
  receipt: String
  paymentId: String
  paymentOrderId: String
  paymentDescription: String
  hasPaymentDispute: Boolean
}

input OrdersScalarWhereInput {
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  totalDiscount: Int
  totalDiscount_not: Int
  totalDiscount_in: [Int!]
  totalDiscount_not_in: [Int!]
  totalDiscount_lt: Int
  totalDiscount_lte: Int
  totalDiscount_gt: Int
  totalDiscount_gte: Int
  people: Int
  people_not: Int
  people_in: [Int!]
  people_not_in: [Int!]
  people_lt: Int
  people_lte: Int
  people_gt: Int
  people_gte: Int
  bookingid: String
  bookingid_not: String
  bookingid_in: [String!]
  bookingid_not_in: [String!]
  bookingid_lt: String
  bookingid_lte: String
  bookingid_gt: String
  bookingid_gte: String
  bookingid_contains: String
  bookingid_not_contains: String
  bookingid_starts_with: String
  bookingid_not_starts_with: String
  bookingid_ends_with: String
  bookingid_not_ends_with: String
  mobile: String
  mobile_not: String
  mobile_in: [String!]
  mobile_not_in: [String!]
  mobile_lt: String
  mobile_lte: String
  mobile_gt: String
  mobile_gte: String
  mobile_contains: String
  mobile_not_contains: String
  mobile_starts_with: String
  mobile_not_starts_with: String
  mobile_ends_with: String
  mobile_not_ends_with: String
  unlockActive: Boolean
  unlockActive_not: Boolean
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  geolocation: String
  geolocation_not: String
  geolocation_in: [String!]
  geolocation_not_in: [String!]
  geolocation_lt: String
  geolocation_lte: String
  geolocation_gt: String
  geolocation_gte: String
  geolocation_contains: String
  geolocation_not_contains: String
  geolocation_starts_with: String
  geolocation_not_starts_with: String
  geolocation_ends_with: String
  geolocation_not_ends_with: String
  referrer: String
  referrer_not: String
  referrer_in: [String!]
  referrer_not_in: [String!]
  referrer_lt: String
  referrer_lte: String
  referrer_gt: String
  referrer_gte: String
  referrer_contains: String
  referrer_not_contains: String
  referrer_starts_with: String
  referrer_not_starts_with: String
  referrer_ends_with: String
  referrer_not_ends_with: String
  confirmed: Boolean
  confirmed_not: Boolean
  cancelled: Boolean
  cancelled_not: Boolean
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  receipt: String
  receipt_not: String
  receipt_in: [String!]
  receipt_not_in: [String!]
  receipt_lt: String
  receipt_lte: String
  receipt_gt: String
  receipt_gte: String
  receipt_contains: String
  receipt_not_contains: String
  receipt_starts_with: String
  receipt_not_starts_with: String
  receipt_ends_with: String
  receipt_not_ends_with: String
  paymentId: String
  paymentId_not: String
  paymentId_in: [String!]
  paymentId_not_in: [String!]
  paymentId_lt: String
  paymentId_lte: String
  paymentId_gt: String
  paymentId_gte: String
  paymentId_contains: String
  paymentId_not_contains: String
  paymentId_starts_with: String
  paymentId_not_starts_with: String
  paymentId_ends_with: String
  paymentId_not_ends_with: String
  paymentOrderId: String
  paymentOrderId_not: String
  paymentOrderId_in: [String!]
  paymentOrderId_not_in: [String!]
  paymentOrderId_lt: String
  paymentOrderId_lte: String
  paymentOrderId_gt: String
  paymentOrderId_gte: String
  paymentOrderId_contains: String
  paymentOrderId_not_contains: String
  paymentOrderId_starts_with: String
  paymentOrderId_not_starts_with: String
  paymentOrderId_ends_with: String
  paymentOrderId_not_ends_with: String
  paymentDescription: String
  paymentDescription_not: String
  paymentDescription_in: [String!]
  paymentDescription_not_in: [String!]
  paymentDescription_lt: String
  paymentDescription_lte: String
  paymentDescription_gt: String
  paymentDescription_gte: String
  paymentDescription_contains: String
  paymentDescription_not_contains: String
  paymentDescription_starts_with: String
  paymentDescription_not_starts_with: String
  paymentDescription_ends_with: String
  paymentDescription_not_ends_with: String
  hasPaymentDispute: Boolean
  hasPaymentDispute_not: Boolean
  AND: [OrdersScalarWhereInput!]
  OR: [OrdersScalarWhereInput!]
  NOT: [OrdersScalarWhereInput!]
}

type OrdersSubscriptionPayload {
  mutation: MutationType!
  node: Orders
  updatedFields: [String!]
  previousValues: OrdersPreviousValues
}

input OrdersSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrdersWhereInput
  AND: [OrdersSubscriptionWhereInput!]
  OR: [OrdersSubscriptionWhereInput!]
  NOT: [OrdersSubscriptionWhereInput!]
}

input OrdersUpdateInput {
  restaurants: RestaurantsUpdateOneWithoutOrdersesInput
  timeDiscount: TimeDiscountUpdateOneWithoutOrdersesInput
  user: UserUpdateOneRequiredWithoutOrdersesInput
  date: DateTime
  totalDiscount: Int
  people: Int
  bookingid: String
  mobile: String
  unlockActive: Boolean
  name: String
  geolocation: String
  referrer: String
  confirmed: Boolean
  cancelled: Boolean
  amount: Int
  receipt: String
  paymentId: String
  paymentOrderId: String
  paymentDescription: String
  hasPaymentDispute: Boolean
}

input OrdersUpdateManyDataInput {
  date: DateTime
  totalDiscount: Int
  people: Int
  bookingid: String
  mobile: String
  unlockActive: Boolean
  name: String
  geolocation: String
  referrer: String
  confirmed: Boolean
  cancelled: Boolean
  amount: Int
  receipt: String
  paymentId: String
  paymentOrderId: String
  paymentDescription: String
  hasPaymentDispute: Boolean
}

input OrdersUpdateManyMutationInput {
  date: DateTime
  totalDiscount: Int
  people: Int
  bookingid: String
  mobile: String
  unlockActive: Boolean
  name: String
  geolocation: String
  referrer: String
  confirmed: Boolean
  cancelled: Boolean
  amount: Int
  receipt: String
  paymentId: String
  paymentOrderId: String
  paymentDescription: String
  hasPaymentDispute: Boolean
}

input OrdersUpdateManyWithoutRestaurantsInput {
  create: [OrdersCreateWithoutRestaurantsInput!]
  delete: [OrdersWhereUniqueInput!]
  connect: [OrdersWhereUniqueInput!]
  set: [OrdersWhereUniqueInput!]
  disconnect: [OrdersWhereUniqueInput!]
  update: [OrdersUpdateWithWhereUniqueWithoutRestaurantsInput!]
  upsert: [OrdersUpsertWithWhereUniqueWithoutRestaurantsInput!]
  deleteMany: [OrdersScalarWhereInput!]
  updateMany: [OrdersUpdateManyWithWhereNestedInput!]
}

input OrdersUpdateManyWithoutTimeDiscountInput {
  create: [OrdersCreateWithoutTimeDiscountInput!]
  delete: [OrdersWhereUniqueInput!]
  connect: [OrdersWhereUniqueInput!]
  set: [OrdersWhereUniqueInput!]
  disconnect: [OrdersWhereUniqueInput!]
  update: [OrdersUpdateWithWhereUniqueWithoutTimeDiscountInput!]
  upsert: [OrdersUpsertWithWhereUniqueWithoutTimeDiscountInput!]
  deleteMany: [OrdersScalarWhereInput!]
  updateMany: [OrdersUpdateManyWithWhereNestedInput!]
}

input OrdersUpdateManyWithoutUserInput {
  create: [OrdersCreateWithoutUserInput!]
  delete: [OrdersWhereUniqueInput!]
  connect: [OrdersWhereUniqueInput!]
  set: [OrdersWhereUniqueInput!]
  disconnect: [OrdersWhereUniqueInput!]
  update: [OrdersUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [OrdersUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [OrdersScalarWhereInput!]
  updateMany: [OrdersUpdateManyWithWhereNestedInput!]
}

input OrdersUpdateManyWithWhereNestedInput {
  where: OrdersScalarWhereInput!
  data: OrdersUpdateManyDataInput!
}

input OrdersUpdateWithoutRestaurantsDataInput {
  timeDiscount: TimeDiscountUpdateOneWithoutOrdersesInput
  user: UserUpdateOneRequiredWithoutOrdersesInput
  date: DateTime
  totalDiscount: Int
  people: Int
  bookingid: String
  mobile: String
  unlockActive: Boolean
  name: String
  geolocation: String
  referrer: String
  confirmed: Boolean
  cancelled: Boolean
  amount: Int
  receipt: String
  paymentId: String
  paymentOrderId: String
  paymentDescription: String
  hasPaymentDispute: Boolean
}

input OrdersUpdateWithoutTimeDiscountDataInput {
  restaurants: RestaurantsUpdateOneWithoutOrdersesInput
  user: UserUpdateOneRequiredWithoutOrdersesInput
  date: DateTime
  totalDiscount: Int
  people: Int
  bookingid: String
  mobile: String
  unlockActive: Boolean
  name: String
  geolocation: String
  referrer: String
  confirmed: Boolean
  cancelled: Boolean
  amount: Int
  receipt: String
  paymentId: String
  paymentOrderId: String
  paymentDescription: String
  hasPaymentDispute: Boolean
}

input OrdersUpdateWithoutUserDataInput {
  restaurants: RestaurantsUpdateOneWithoutOrdersesInput
  timeDiscount: TimeDiscountUpdateOneWithoutOrdersesInput
  date: DateTime
  totalDiscount: Int
  people: Int
  bookingid: String
  mobile: String
  unlockActive: Boolean
  name: String
  geolocation: String
  referrer: String
  confirmed: Boolean
  cancelled: Boolean
  amount: Int
  receipt: String
  paymentId: String
  paymentOrderId: String
  paymentDescription: String
  hasPaymentDispute: Boolean
}

input OrdersUpdateWithWhereUniqueWithoutRestaurantsInput {
  where: OrdersWhereUniqueInput!
  data: OrdersUpdateWithoutRestaurantsDataInput!
}

input OrdersUpdateWithWhereUniqueWithoutTimeDiscountInput {
  where: OrdersWhereUniqueInput!
  data: OrdersUpdateWithoutTimeDiscountDataInput!
}

input OrdersUpdateWithWhereUniqueWithoutUserInput {
  where: OrdersWhereUniqueInput!
  data: OrdersUpdateWithoutUserDataInput!
}

input OrdersUpsertWithWhereUniqueWithoutRestaurantsInput {
  where: OrdersWhereUniqueInput!
  update: OrdersUpdateWithoutRestaurantsDataInput!
  create: OrdersCreateWithoutRestaurantsInput!
}

input OrdersUpsertWithWhereUniqueWithoutTimeDiscountInput {
  where: OrdersWhereUniqueInput!
  update: OrdersUpdateWithoutTimeDiscountDataInput!
  create: OrdersCreateWithoutTimeDiscountInput!
}

input OrdersUpsertWithWhereUniqueWithoutUserInput {
  where: OrdersWhereUniqueInput!
  update: OrdersUpdateWithoutUserDataInput!
  create: OrdersCreateWithoutUserInput!
}

input OrdersWhereInput {
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  restaurants: RestaurantsWhereInput
  timeDiscount: TimeDiscountWhereInput
  user: UserWhereInput
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  totalDiscount: Int
  totalDiscount_not: Int
  totalDiscount_in: [Int!]
  totalDiscount_not_in: [Int!]
  totalDiscount_lt: Int
  totalDiscount_lte: Int
  totalDiscount_gt: Int
  totalDiscount_gte: Int
  people: Int
  people_not: Int
  people_in: [Int!]
  people_not_in: [Int!]
  people_lt: Int
  people_lte: Int
  people_gt: Int
  people_gte: Int
  bookingid: String
  bookingid_not: String
  bookingid_in: [String!]
  bookingid_not_in: [String!]
  bookingid_lt: String
  bookingid_lte: String
  bookingid_gt: String
  bookingid_gte: String
  bookingid_contains: String
  bookingid_not_contains: String
  bookingid_starts_with: String
  bookingid_not_starts_with: String
  bookingid_ends_with: String
  bookingid_not_ends_with: String
  mobile: String
  mobile_not: String
  mobile_in: [String!]
  mobile_not_in: [String!]
  mobile_lt: String
  mobile_lte: String
  mobile_gt: String
  mobile_gte: String
  mobile_contains: String
  mobile_not_contains: String
  mobile_starts_with: String
  mobile_not_starts_with: String
  mobile_ends_with: String
  mobile_not_ends_with: String
  unlockActive: Boolean
  unlockActive_not: Boolean
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  geolocation: String
  geolocation_not: String
  geolocation_in: [String!]
  geolocation_not_in: [String!]
  geolocation_lt: String
  geolocation_lte: String
  geolocation_gt: String
  geolocation_gte: String
  geolocation_contains: String
  geolocation_not_contains: String
  geolocation_starts_with: String
  geolocation_not_starts_with: String
  geolocation_ends_with: String
  geolocation_not_ends_with: String
  referrer: String
  referrer_not: String
  referrer_in: [String!]
  referrer_not_in: [String!]
  referrer_lt: String
  referrer_lte: String
  referrer_gt: String
  referrer_gte: String
  referrer_contains: String
  referrer_not_contains: String
  referrer_starts_with: String
  referrer_not_starts_with: String
  referrer_ends_with: String
  referrer_not_ends_with: String
  confirmed: Boolean
  confirmed_not: Boolean
  cancelled: Boolean
  cancelled_not: Boolean
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  receipt: String
  receipt_not: String
  receipt_in: [String!]
  receipt_not_in: [String!]
  receipt_lt: String
  receipt_lte: String
  receipt_gt: String
  receipt_gte: String
  receipt_contains: String
  receipt_not_contains: String
  receipt_starts_with: String
  receipt_not_starts_with: String
  receipt_ends_with: String
  receipt_not_ends_with: String
  paymentId: String
  paymentId_not: String
  paymentId_in: [String!]
  paymentId_not_in: [String!]
  paymentId_lt: String
  paymentId_lte: String
  paymentId_gt: String
  paymentId_gte: String
  paymentId_contains: String
  paymentId_not_contains: String
  paymentId_starts_with: String
  paymentId_not_starts_with: String
  paymentId_ends_with: String
  paymentId_not_ends_with: String
  paymentOrderId: String
  paymentOrderId_not: String
  paymentOrderId_in: [String!]
  paymentOrderId_not_in: [String!]
  paymentOrderId_lt: String
  paymentOrderId_lte: String
  paymentOrderId_gt: String
  paymentOrderId_gte: String
  paymentOrderId_contains: String
  paymentOrderId_not_contains: String
  paymentOrderId_starts_with: String
  paymentOrderId_not_starts_with: String
  paymentOrderId_ends_with: String
  paymentOrderId_not_ends_with: String
  paymentDescription: String
  paymentDescription_not: String
  paymentDescription_in: [String!]
  paymentDescription_not_in: [String!]
  paymentDescription_lt: String
  paymentDescription_lte: String
  paymentDescription_gt: String
  paymentDescription_gte: String
  paymentDescription_contains: String
  paymentDescription_not_contains: String
  paymentDescription_starts_with: String
  paymentDescription_not_starts_with: String
  paymentDescription_ends_with: String
  paymentDescription_not_ends_with: String
  hasPaymentDispute: Boolean
  hasPaymentDispute_not: Boolean
  AND: [OrdersWhereInput!]
  OR: [OrdersWhereInput!]
  NOT: [OrdersWhereInput!]
}

input OrdersWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  ads(where: AdsWhereUniqueInput!): Ads
  adses(where: AdsWhereInput, orderBy: AdsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ads]!
  adsesConnection(where: AdsWhereInput, orderBy: AdsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AdsConnection!
  blog(where: BlogWhereUniqueInput!): Blog
  blogs(where: BlogWhereInput, orderBy: BlogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Blog]!
  blogsConnection(where: BlogWhereInput, orderBy: BlogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BlogConnection!
  brandTile(where: BrandTileWhereUniqueInput!): BrandTile
  brandTiles(where: BrandTileWhereInput, orderBy: BrandTileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BrandTile]!
  brandTilesConnection(where: BrandTileWhereInput, orderBy: BrandTileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BrandTileConnection!
  contacts(where: ContactsWhereUniqueInput!): Contacts
  contactses(where: ContactsWhereInput, orderBy: ContactsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contacts]!
  contactsesConnection(where: ContactsWhereInput, orderBy: ContactsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContactsConnection!
  file(where: FileWhereUniqueInput!): File
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  friday(where: FridayWhereUniqueInput!): Friday
  fridays(where: FridayWhereInput, orderBy: FridayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Friday]!
  fridaysConnection(where: FridayWhereInput, orderBy: FridayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FridayConnection!
  hotDeals(where: HotDealsWhereUniqueInput!): HotDeals
  hotDealses(where: HotDealsWhereInput, orderBy: HotDealsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HotDeals]!
  hotDealsesConnection(where: HotDealsWhereInput, orderBy: HotDealsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HotDealsConnection!
  misc(where: MiscWhereUniqueInput!): Misc
  miscs(where: MiscWhereInput, orderBy: MiscOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Misc]!
  miscsConnection(where: MiscWhereInput, orderBy: MiscOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MiscConnection!
  monday(where: MondayWhereUniqueInput!): Monday
  mondays(where: MondayWhereInput, orderBy: MondayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Monday]!
  mondaysConnection(where: MondayWhereInput, orderBy: MondayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MondayConnection!
  orders(where: OrdersWhereUniqueInput!): Orders
  orderses(where: OrdersWhereInput, orderBy: OrdersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Orders]!
  ordersesConnection(where: OrdersWhereInput, orderBy: OrdersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrdersConnection!
  renoPass(where: RenoPassWhereUniqueInput!): RenoPass
  renoPasses(where: RenoPassWhereInput, orderBy: RenoPassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RenoPass]!
  renoPassesConnection(where: RenoPassWhereInput, orderBy: RenoPassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RenoPassConnection!
  restaurantType(where: RestaurantTypeWhereUniqueInput!): RestaurantType
  restaurantTypes(where: RestaurantTypeWhereInput, orderBy: RestaurantTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RestaurantType]!
  restaurantTypesConnection(where: RestaurantTypeWhereInput, orderBy: RestaurantTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RestaurantTypeConnection!
  restaurants(where: RestaurantsWhereUniqueInput!): Restaurants
  restaurantses(where: RestaurantsWhereInput, orderBy: RestaurantsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Restaurants]!
  restaurantsesConnection(where: RestaurantsWhereInput, orderBy: RestaurantsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RestaurantsConnection!
  saturday(where: SaturdayWhereUniqueInput!): Saturday
  saturdays(where: SaturdayWhereInput, orderBy: SaturdayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Saturday]!
  saturdaysConnection(where: SaturdayWhereInput, orderBy: SaturdayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SaturdayConnection!
  sunday(where: SundayWhereUniqueInput!): Sunday
  sundays(where: SundayWhereInput, orderBy: SundayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sunday]!
  sundaysConnection(where: SundayWhereInput, orderBy: SundayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SundayConnection!
  thursday(where: ThursdayWhereUniqueInput!): Thursday
  thursdays(where: ThursdayWhereInput, orderBy: ThursdayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Thursday]!
  thursdaysConnection(where: ThursdayWhereInput, orderBy: ThursdayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ThursdayConnection!
  timeDiscount(where: TimeDiscountWhereUniqueInput!): TimeDiscount
  timeDiscounts(where: TimeDiscountWhereInput, orderBy: TimeDiscountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeDiscount]!
  timeDiscountsConnection(where: TimeDiscountWhereInput, orderBy: TimeDiscountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TimeDiscountConnection!
  tuesday(where: TuesdayWhereUniqueInput!): Tuesday
  tuesdays(where: TuesdayWhereInput, orderBy: TuesdayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tuesday]!
  tuesdaysConnection(where: TuesdayWhereInput, orderBy: TuesdayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TuesdayConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userReviews(where: UserReviewsWhereUniqueInput!): UserReviews
  userReviewses(where: UserReviewsWhereInput, orderBy: UserReviewsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserReviews]!
  userReviewsesConnection(where: UserReviewsWhereInput, orderBy: UserReviewsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserReviewsConnection!
  wednesday(where: WednesdayWhereUniqueInput!): Wednesday
  wednesdays(where: WednesdayWhereInput, orderBy: WednesdayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Wednesday]!
  wednesdaysConnection(where: WednesdayWhereInput, orderBy: WednesdayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WednesdayConnection!
  city(where: cityWhereUniqueInput!): city
  cities(where: cityWhereInput, orderBy: cityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [city]!
  citiesConnection(where: cityWhereInput, orderBy: cityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): cityConnection!
  node(id: ID!): Node
}

type RenoPass {
  id: ID!
  user: User
  city: city!
  premiumStartDate: DateTime!
  premiumExpireDate: DateTime!
  days: String!
  amount: Int!
  receipt: String!
  paymentId: String!
  paymentOrderId: String!
  paymentDescription: String!
}

type RenoPassConnection {
  pageInfo: PageInfo!
  edges: [RenoPassEdge]!
  aggregate: AggregateRenoPass!
}

input RenoPassCreateInput {
  id: ID
  user: UserCreateOneWithoutRenoPassInput
  city: cityCreateOneInput!
  premiumStartDate: DateTime!
  premiumExpireDate: DateTime!
  days: String!
  amount: Int!
  receipt: String!
  paymentId: String!
  paymentOrderId: String!
  paymentDescription: String!
}

input RenoPassCreateOneWithoutUserInput {
  create: RenoPassCreateWithoutUserInput
  connect: RenoPassWhereUniqueInput
}

input RenoPassCreateWithoutUserInput {
  id: ID
  city: cityCreateOneInput!
  premiumStartDate: DateTime!
  premiumExpireDate: DateTime!
  days: String!
  amount: Int!
  receipt: String!
  paymentId: String!
  paymentOrderId: String!
  paymentDescription: String!
}

type RenoPassEdge {
  node: RenoPass!
  cursor: String!
}

enum RenoPassOrderByInput {
  id_ASC
  id_DESC
  premiumStartDate_ASC
  premiumStartDate_DESC
  premiumExpireDate_ASC
  premiumExpireDate_DESC
  days_ASC
  days_DESC
  amount_ASC
  amount_DESC
  receipt_ASC
  receipt_DESC
  paymentId_ASC
  paymentId_DESC
  paymentOrderId_ASC
  paymentOrderId_DESC
  paymentDescription_ASC
  paymentDescription_DESC
}

type RenoPassPreviousValues {
  id: ID!
  premiumStartDate: DateTime!
  premiumExpireDate: DateTime!
  days: String!
  amount: Int!
  receipt: String!
  paymentId: String!
  paymentOrderId: String!
  paymentDescription: String!
}

type RenoPassSubscriptionPayload {
  mutation: MutationType!
  node: RenoPass
  updatedFields: [String!]
  previousValues: RenoPassPreviousValues
}

input RenoPassSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RenoPassWhereInput
  AND: [RenoPassSubscriptionWhereInput!]
  OR: [RenoPassSubscriptionWhereInput!]
  NOT: [RenoPassSubscriptionWhereInput!]
}

input RenoPassUpdateInput {
  user: UserUpdateOneWithoutRenoPassInput
  city: cityUpdateOneRequiredInput
  premiumStartDate: DateTime
  premiumExpireDate: DateTime
  days: String
  amount: Int
  receipt: String
  paymentId: String
  paymentOrderId: String
  paymentDescription: String
}

input RenoPassUpdateManyMutationInput {
  premiumStartDate: DateTime
  premiumExpireDate: DateTime
  days: String
  amount: Int
  receipt: String
  paymentId: String
  paymentOrderId: String
  paymentDescription: String
}

input RenoPassUpdateOneWithoutUserInput {
  create: RenoPassCreateWithoutUserInput
  update: RenoPassUpdateWithoutUserDataInput
  upsert: RenoPassUpsertWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  connect: RenoPassWhereUniqueInput
}

input RenoPassUpdateWithoutUserDataInput {
  city: cityUpdateOneRequiredInput
  premiumStartDate: DateTime
  premiumExpireDate: DateTime
  days: String
  amount: Int
  receipt: String
  paymentId: String
  paymentOrderId: String
  paymentDescription: String
}

input RenoPassUpsertWithoutUserInput {
  update: RenoPassUpdateWithoutUserDataInput!
  create: RenoPassCreateWithoutUserInput!
}

input RenoPassWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  city: cityWhereInput
  premiumStartDate: DateTime
  premiumStartDate_not: DateTime
  premiumStartDate_in: [DateTime!]
  premiumStartDate_not_in: [DateTime!]
  premiumStartDate_lt: DateTime
  premiumStartDate_lte: DateTime
  premiumStartDate_gt: DateTime
  premiumStartDate_gte: DateTime
  premiumExpireDate: DateTime
  premiumExpireDate_not: DateTime
  premiumExpireDate_in: [DateTime!]
  premiumExpireDate_not_in: [DateTime!]
  premiumExpireDate_lt: DateTime
  premiumExpireDate_lte: DateTime
  premiumExpireDate_gt: DateTime
  premiumExpireDate_gte: DateTime
  days: String
  days_not: String
  days_in: [String!]
  days_not_in: [String!]
  days_lt: String
  days_lte: String
  days_gt: String
  days_gte: String
  days_contains: String
  days_not_contains: String
  days_starts_with: String
  days_not_starts_with: String
  days_ends_with: String
  days_not_ends_with: String
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  receipt: String
  receipt_not: String
  receipt_in: [String!]
  receipt_not_in: [String!]
  receipt_lt: String
  receipt_lte: String
  receipt_gt: String
  receipt_gte: String
  receipt_contains: String
  receipt_not_contains: String
  receipt_starts_with: String
  receipt_not_starts_with: String
  receipt_ends_with: String
  receipt_not_ends_with: String
  paymentId: String
  paymentId_not: String
  paymentId_in: [String!]
  paymentId_not_in: [String!]
  paymentId_lt: String
  paymentId_lte: String
  paymentId_gt: String
  paymentId_gte: String
  paymentId_contains: String
  paymentId_not_contains: String
  paymentId_starts_with: String
  paymentId_not_starts_with: String
  paymentId_ends_with: String
  paymentId_not_ends_with: String
  paymentOrderId: String
  paymentOrderId_not: String
  paymentOrderId_in: [String!]
  paymentOrderId_not_in: [String!]
  paymentOrderId_lt: String
  paymentOrderId_lte: String
  paymentOrderId_gt: String
  paymentOrderId_gte: String
  paymentOrderId_contains: String
  paymentOrderId_not_contains: String
  paymentOrderId_starts_with: String
  paymentOrderId_not_starts_with: String
  paymentOrderId_ends_with: String
  paymentOrderId_not_ends_with: String
  paymentDescription: String
  paymentDescription_not: String
  paymentDescription_in: [String!]
  paymentDescription_not_in: [String!]
  paymentDescription_lt: String
  paymentDescription_lte: String
  paymentDescription_gt: String
  paymentDescription_gte: String
  paymentDescription_contains: String
  paymentDescription_not_contains: String
  paymentDescription_starts_with: String
  paymentDescription_not_starts_with: String
  paymentDescription_ends_with: String
  paymentDescription_not_ends_with: String
  AND: [RenoPassWhereInput!]
  OR: [RenoPassWhereInput!]
  NOT: [RenoPassWhereInput!]
}

input RenoPassWhereUniqueInput {
  id: ID
}

type Restaurants {
  city: String!
  id: ID!
  enableLoginAccess: Boolean!
  name: String!
  email: String
  password: String
  orderses(where: OrdersWhereInput, orderBy: OrdersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Orders!]
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes(where: RestaurantTypeWhereInput, orderBy: RestaurantTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RestaurantType!]
  state: String!
  timeDiscounts(where: TimeDiscountWhereInput, orderBy: TimeDiscountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeDiscount!]
  about: String
  address: String
  userReviewses(where: UserReviewsWhereInput, orderBy: UserReviewsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserReviews!]
  hotDealses(where: HotDealsWhereInput, orderBy: HotDealsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HotDeals!]
  conditions: String
  remail: String
  rphone: [String!]!
  friday: Friday
  monday: Monday
  saturday: Saturday
  sunday: Sunday
  thursday: Thursday
  tuesday: Tuesday
  wednesday: Wednesday
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean!
  renoCommision: Int!
  menu: [Json!]!
  brandTile: BrandTile
  restaurantImages: [String!]!
  hasPickup: Boolean
  restaurantMenu: [String!]!
}

type RestaurantsConnection {
  pageInfo: PageInfo!
  edges: [RestaurantsEdge]!
  aggregate: AggregateRestaurants!
}

input RestaurantsCreateInput {
  city: String!
  id: ID
  enableLoginAccess: Boolean
  name: String!
  email: String
  password: String
  orderses: OrdersCreateManyWithoutRestaurantsInput
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes: RestaurantTypeCreateManyWithoutRestaurantsesInput
  state: String!
  timeDiscounts: TimeDiscountCreateManyWithoutRestaurantsInput
  about: String
  address: String
  userReviewses: UserReviewsCreateManyWithoutRestaurantsInput
  hotDealses: HotDealsCreateManyWithoutRestaurantsesInput
  conditions: String
  remail: String
  rphone: RestaurantsCreaterphoneInput
  friday: FridayCreateOneWithoutRestaurantsInput
  monday: MondayCreateOneWithoutRestaurantsInput
  saturday: SaturdayCreateOneWithoutRestaurantsInput
  sunday: SundayCreateOneWithoutRestaurantsInput
  thursday: ThursdayCreateOneWithoutRestaurantsInput
  tuesday: TuesdayCreateOneWithoutRestaurantsInput
  wednesday: WednesdayCreateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsCreatemenuInput
  brandTile: BrandTileCreateOneWithoutRestaurantsesInput
  restaurantImages: RestaurantsCreaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsCreaterestaurantMenuInput
}

input RestaurantsCreateManyWithoutBrandTileInput {
  create: [RestaurantsCreateWithoutBrandTileInput!]
  connect: [RestaurantsWhereUniqueInput!]
}

input RestaurantsCreateManyWithoutHotDealsesInput {
  create: [RestaurantsCreateWithoutHotDealsesInput!]
  connect: [RestaurantsWhereUniqueInput!]
}

input RestaurantsCreateManyWithoutRestaurantTypesInput {
  create: [RestaurantsCreateWithoutRestaurantTypesInput!]
  connect: [RestaurantsWhereUniqueInput!]
}

input RestaurantsCreatemenuInput {
  set: [Json!]
}

input RestaurantsCreateOneWithoutFridayInput {
  create: RestaurantsCreateWithoutFridayInput
  connect: RestaurantsWhereUniqueInput
}

input RestaurantsCreateOneWithoutMondayInput {
  create: RestaurantsCreateWithoutMondayInput
  connect: RestaurantsWhereUniqueInput
}

input RestaurantsCreateOneWithoutOrdersesInput {
  create: RestaurantsCreateWithoutOrdersesInput
  connect: RestaurantsWhereUniqueInput
}

input RestaurantsCreateOneWithoutSaturdayInput {
  create: RestaurantsCreateWithoutSaturdayInput
  connect: RestaurantsWhereUniqueInput
}

input RestaurantsCreateOneWithoutSundayInput {
  create: RestaurantsCreateWithoutSundayInput
  connect: RestaurantsWhereUniqueInput
}

input RestaurantsCreateOneWithoutThursdayInput {
  create: RestaurantsCreateWithoutThursdayInput
  connect: RestaurantsWhereUniqueInput
}

input RestaurantsCreateOneWithoutTimeDiscountsInput {
  create: RestaurantsCreateWithoutTimeDiscountsInput
  connect: RestaurantsWhereUniqueInput
}

input RestaurantsCreateOneWithoutTuesdayInput {
  create: RestaurantsCreateWithoutTuesdayInput
  connect: RestaurantsWhereUniqueInput
}

input RestaurantsCreateOneWithoutUserReviewsesInput {
  create: RestaurantsCreateWithoutUserReviewsesInput
  connect: RestaurantsWhereUniqueInput
}

input RestaurantsCreateOneWithoutWednesdayInput {
  create: RestaurantsCreateWithoutWednesdayInput
  connect: RestaurantsWhereUniqueInput
}

input RestaurantsCreaterestaurantImagesInput {
  set: [String!]
}

input RestaurantsCreaterestaurantMenuInput {
  set: [String!]
}

input RestaurantsCreaterphoneInput {
  set: [String!]
}

input RestaurantsCreateWithoutBrandTileInput {
  city: String!
  id: ID
  enableLoginAccess: Boolean
  name: String!
  email: String
  password: String
  orderses: OrdersCreateManyWithoutRestaurantsInput
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes: RestaurantTypeCreateManyWithoutRestaurantsesInput
  state: String!
  timeDiscounts: TimeDiscountCreateManyWithoutRestaurantsInput
  about: String
  address: String
  userReviewses: UserReviewsCreateManyWithoutRestaurantsInput
  hotDealses: HotDealsCreateManyWithoutRestaurantsesInput
  conditions: String
  remail: String
  rphone: RestaurantsCreaterphoneInput
  friday: FridayCreateOneWithoutRestaurantsInput
  monday: MondayCreateOneWithoutRestaurantsInput
  saturday: SaturdayCreateOneWithoutRestaurantsInput
  sunday: SundayCreateOneWithoutRestaurantsInput
  thursday: ThursdayCreateOneWithoutRestaurantsInput
  tuesday: TuesdayCreateOneWithoutRestaurantsInput
  wednesday: WednesdayCreateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsCreatemenuInput
  restaurantImages: RestaurantsCreaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsCreaterestaurantMenuInput
}

input RestaurantsCreateWithoutFridayInput {
  city: String!
  id: ID
  enableLoginAccess: Boolean
  name: String!
  email: String
  password: String
  orderses: OrdersCreateManyWithoutRestaurantsInput
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes: RestaurantTypeCreateManyWithoutRestaurantsesInput
  state: String!
  timeDiscounts: TimeDiscountCreateManyWithoutRestaurantsInput
  about: String
  address: String
  userReviewses: UserReviewsCreateManyWithoutRestaurantsInput
  hotDealses: HotDealsCreateManyWithoutRestaurantsesInput
  conditions: String
  remail: String
  rphone: RestaurantsCreaterphoneInput
  monday: MondayCreateOneWithoutRestaurantsInput
  saturday: SaturdayCreateOneWithoutRestaurantsInput
  sunday: SundayCreateOneWithoutRestaurantsInput
  thursday: ThursdayCreateOneWithoutRestaurantsInput
  tuesday: TuesdayCreateOneWithoutRestaurantsInput
  wednesday: WednesdayCreateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsCreatemenuInput
  brandTile: BrandTileCreateOneWithoutRestaurantsesInput
  restaurantImages: RestaurantsCreaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsCreaterestaurantMenuInput
}

input RestaurantsCreateWithoutHotDealsesInput {
  city: String!
  id: ID
  enableLoginAccess: Boolean
  name: String!
  email: String
  password: String
  orderses: OrdersCreateManyWithoutRestaurantsInput
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes: RestaurantTypeCreateManyWithoutRestaurantsesInput
  state: String!
  timeDiscounts: TimeDiscountCreateManyWithoutRestaurantsInput
  about: String
  address: String
  userReviewses: UserReviewsCreateManyWithoutRestaurantsInput
  conditions: String
  remail: String
  rphone: RestaurantsCreaterphoneInput
  friday: FridayCreateOneWithoutRestaurantsInput
  monday: MondayCreateOneWithoutRestaurantsInput
  saturday: SaturdayCreateOneWithoutRestaurantsInput
  sunday: SundayCreateOneWithoutRestaurantsInput
  thursday: ThursdayCreateOneWithoutRestaurantsInput
  tuesday: TuesdayCreateOneWithoutRestaurantsInput
  wednesday: WednesdayCreateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsCreatemenuInput
  brandTile: BrandTileCreateOneWithoutRestaurantsesInput
  restaurantImages: RestaurantsCreaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsCreaterestaurantMenuInput
}

input RestaurantsCreateWithoutMondayInput {
  city: String!
  id: ID
  enableLoginAccess: Boolean
  name: String!
  email: String
  password: String
  orderses: OrdersCreateManyWithoutRestaurantsInput
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes: RestaurantTypeCreateManyWithoutRestaurantsesInput
  state: String!
  timeDiscounts: TimeDiscountCreateManyWithoutRestaurantsInput
  about: String
  address: String
  userReviewses: UserReviewsCreateManyWithoutRestaurantsInput
  hotDealses: HotDealsCreateManyWithoutRestaurantsesInput
  conditions: String
  remail: String
  rphone: RestaurantsCreaterphoneInput
  friday: FridayCreateOneWithoutRestaurantsInput
  saturday: SaturdayCreateOneWithoutRestaurantsInput
  sunday: SundayCreateOneWithoutRestaurantsInput
  thursday: ThursdayCreateOneWithoutRestaurantsInput
  tuesday: TuesdayCreateOneWithoutRestaurantsInput
  wednesday: WednesdayCreateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsCreatemenuInput
  brandTile: BrandTileCreateOneWithoutRestaurantsesInput
  restaurantImages: RestaurantsCreaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsCreaterestaurantMenuInput
}

input RestaurantsCreateWithoutOrdersesInput {
  city: String!
  id: ID
  enableLoginAccess: Boolean
  name: String!
  email: String
  password: String
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes: RestaurantTypeCreateManyWithoutRestaurantsesInput
  state: String!
  timeDiscounts: TimeDiscountCreateManyWithoutRestaurantsInput
  about: String
  address: String
  userReviewses: UserReviewsCreateManyWithoutRestaurantsInput
  hotDealses: HotDealsCreateManyWithoutRestaurantsesInput
  conditions: String
  remail: String
  rphone: RestaurantsCreaterphoneInput
  friday: FridayCreateOneWithoutRestaurantsInput
  monday: MondayCreateOneWithoutRestaurantsInput
  saturday: SaturdayCreateOneWithoutRestaurantsInput
  sunday: SundayCreateOneWithoutRestaurantsInput
  thursday: ThursdayCreateOneWithoutRestaurantsInput
  tuesday: TuesdayCreateOneWithoutRestaurantsInput
  wednesday: WednesdayCreateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsCreatemenuInput
  brandTile: BrandTileCreateOneWithoutRestaurantsesInput
  restaurantImages: RestaurantsCreaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsCreaterestaurantMenuInput
}

input RestaurantsCreateWithoutRestaurantTypesInput {
  city: String!
  id: ID
  enableLoginAccess: Boolean
  name: String!
  email: String
  password: String
  orderses: OrdersCreateManyWithoutRestaurantsInput
  rating: Float
  imageurl: String
  googlemapsurl: String
  state: String!
  timeDiscounts: TimeDiscountCreateManyWithoutRestaurantsInput
  about: String
  address: String
  userReviewses: UserReviewsCreateManyWithoutRestaurantsInput
  hotDealses: HotDealsCreateManyWithoutRestaurantsesInput
  conditions: String
  remail: String
  rphone: RestaurantsCreaterphoneInput
  friday: FridayCreateOneWithoutRestaurantsInput
  monday: MondayCreateOneWithoutRestaurantsInput
  saturday: SaturdayCreateOneWithoutRestaurantsInput
  sunday: SundayCreateOneWithoutRestaurantsInput
  thursday: ThursdayCreateOneWithoutRestaurantsInput
  tuesday: TuesdayCreateOneWithoutRestaurantsInput
  wednesday: WednesdayCreateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsCreatemenuInput
  brandTile: BrandTileCreateOneWithoutRestaurantsesInput
  restaurantImages: RestaurantsCreaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsCreaterestaurantMenuInput
}

input RestaurantsCreateWithoutSaturdayInput {
  city: String!
  id: ID
  enableLoginAccess: Boolean
  name: String!
  email: String
  password: String
  orderses: OrdersCreateManyWithoutRestaurantsInput
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes: RestaurantTypeCreateManyWithoutRestaurantsesInput
  state: String!
  timeDiscounts: TimeDiscountCreateManyWithoutRestaurantsInput
  about: String
  address: String
  userReviewses: UserReviewsCreateManyWithoutRestaurantsInput
  hotDealses: HotDealsCreateManyWithoutRestaurantsesInput
  conditions: String
  remail: String
  rphone: RestaurantsCreaterphoneInput
  friday: FridayCreateOneWithoutRestaurantsInput
  monday: MondayCreateOneWithoutRestaurantsInput
  sunday: SundayCreateOneWithoutRestaurantsInput
  thursday: ThursdayCreateOneWithoutRestaurantsInput
  tuesday: TuesdayCreateOneWithoutRestaurantsInput
  wednesday: WednesdayCreateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsCreatemenuInput
  brandTile: BrandTileCreateOneWithoutRestaurantsesInput
  restaurantImages: RestaurantsCreaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsCreaterestaurantMenuInput
}

input RestaurantsCreateWithoutSundayInput {
  city: String!
  id: ID
  enableLoginAccess: Boolean
  name: String!
  email: String
  password: String
  orderses: OrdersCreateManyWithoutRestaurantsInput
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes: RestaurantTypeCreateManyWithoutRestaurantsesInput
  state: String!
  timeDiscounts: TimeDiscountCreateManyWithoutRestaurantsInput
  about: String
  address: String
  userReviewses: UserReviewsCreateManyWithoutRestaurantsInput
  hotDealses: HotDealsCreateManyWithoutRestaurantsesInput
  conditions: String
  remail: String
  rphone: RestaurantsCreaterphoneInput
  friday: FridayCreateOneWithoutRestaurantsInput
  monday: MondayCreateOneWithoutRestaurantsInput
  saturday: SaturdayCreateOneWithoutRestaurantsInput
  thursday: ThursdayCreateOneWithoutRestaurantsInput
  tuesday: TuesdayCreateOneWithoutRestaurantsInput
  wednesday: WednesdayCreateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsCreatemenuInput
  brandTile: BrandTileCreateOneWithoutRestaurantsesInput
  restaurantImages: RestaurantsCreaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsCreaterestaurantMenuInput
}

input RestaurantsCreateWithoutThursdayInput {
  city: String!
  id: ID
  enableLoginAccess: Boolean
  name: String!
  email: String
  password: String
  orderses: OrdersCreateManyWithoutRestaurantsInput
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes: RestaurantTypeCreateManyWithoutRestaurantsesInput
  state: String!
  timeDiscounts: TimeDiscountCreateManyWithoutRestaurantsInput
  about: String
  address: String
  userReviewses: UserReviewsCreateManyWithoutRestaurantsInput
  hotDealses: HotDealsCreateManyWithoutRestaurantsesInput
  conditions: String
  remail: String
  rphone: RestaurantsCreaterphoneInput
  friday: FridayCreateOneWithoutRestaurantsInput
  monday: MondayCreateOneWithoutRestaurantsInput
  saturday: SaturdayCreateOneWithoutRestaurantsInput
  sunday: SundayCreateOneWithoutRestaurantsInput
  tuesday: TuesdayCreateOneWithoutRestaurantsInput
  wednesday: WednesdayCreateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsCreatemenuInput
  brandTile: BrandTileCreateOneWithoutRestaurantsesInput
  restaurantImages: RestaurantsCreaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsCreaterestaurantMenuInput
}

input RestaurantsCreateWithoutTimeDiscountsInput {
  city: String!
  id: ID
  enableLoginAccess: Boolean
  name: String!
  email: String
  password: String
  orderses: OrdersCreateManyWithoutRestaurantsInput
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes: RestaurantTypeCreateManyWithoutRestaurantsesInput
  state: String!
  about: String
  address: String
  userReviewses: UserReviewsCreateManyWithoutRestaurantsInput
  hotDealses: HotDealsCreateManyWithoutRestaurantsesInput
  conditions: String
  remail: String
  rphone: RestaurantsCreaterphoneInput
  friday: FridayCreateOneWithoutRestaurantsInput
  monday: MondayCreateOneWithoutRestaurantsInput
  saturday: SaturdayCreateOneWithoutRestaurantsInput
  sunday: SundayCreateOneWithoutRestaurantsInput
  thursday: ThursdayCreateOneWithoutRestaurantsInput
  tuesday: TuesdayCreateOneWithoutRestaurantsInput
  wednesday: WednesdayCreateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsCreatemenuInput
  brandTile: BrandTileCreateOneWithoutRestaurantsesInput
  restaurantImages: RestaurantsCreaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsCreaterestaurantMenuInput
}

input RestaurantsCreateWithoutTuesdayInput {
  city: String!
  id: ID
  enableLoginAccess: Boolean
  name: String!
  email: String
  password: String
  orderses: OrdersCreateManyWithoutRestaurantsInput
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes: RestaurantTypeCreateManyWithoutRestaurantsesInput
  state: String!
  timeDiscounts: TimeDiscountCreateManyWithoutRestaurantsInput
  about: String
  address: String
  userReviewses: UserReviewsCreateManyWithoutRestaurantsInput
  hotDealses: HotDealsCreateManyWithoutRestaurantsesInput
  conditions: String
  remail: String
  rphone: RestaurantsCreaterphoneInput
  friday: FridayCreateOneWithoutRestaurantsInput
  monday: MondayCreateOneWithoutRestaurantsInput
  saturday: SaturdayCreateOneWithoutRestaurantsInput
  sunday: SundayCreateOneWithoutRestaurantsInput
  thursday: ThursdayCreateOneWithoutRestaurantsInput
  wednesday: WednesdayCreateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsCreatemenuInput
  brandTile: BrandTileCreateOneWithoutRestaurantsesInput
  restaurantImages: RestaurantsCreaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsCreaterestaurantMenuInput
}

input RestaurantsCreateWithoutUserReviewsesInput {
  city: String!
  id: ID
  enableLoginAccess: Boolean
  name: String!
  email: String
  password: String
  orderses: OrdersCreateManyWithoutRestaurantsInput
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes: RestaurantTypeCreateManyWithoutRestaurantsesInput
  state: String!
  timeDiscounts: TimeDiscountCreateManyWithoutRestaurantsInput
  about: String
  address: String
  hotDealses: HotDealsCreateManyWithoutRestaurantsesInput
  conditions: String
  remail: String
  rphone: RestaurantsCreaterphoneInput
  friday: FridayCreateOneWithoutRestaurantsInput
  monday: MondayCreateOneWithoutRestaurantsInput
  saturday: SaturdayCreateOneWithoutRestaurantsInput
  sunday: SundayCreateOneWithoutRestaurantsInput
  thursday: ThursdayCreateOneWithoutRestaurantsInput
  tuesday: TuesdayCreateOneWithoutRestaurantsInput
  wednesday: WednesdayCreateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsCreatemenuInput
  brandTile: BrandTileCreateOneWithoutRestaurantsesInput
  restaurantImages: RestaurantsCreaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsCreaterestaurantMenuInput
}

input RestaurantsCreateWithoutWednesdayInput {
  city: String!
  id: ID
  enableLoginAccess: Boolean
  name: String!
  email: String
  password: String
  orderses: OrdersCreateManyWithoutRestaurantsInput
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes: RestaurantTypeCreateManyWithoutRestaurantsesInput
  state: String!
  timeDiscounts: TimeDiscountCreateManyWithoutRestaurantsInput
  about: String
  address: String
  userReviewses: UserReviewsCreateManyWithoutRestaurantsInput
  hotDealses: HotDealsCreateManyWithoutRestaurantsesInput
  conditions: String
  remail: String
  rphone: RestaurantsCreaterphoneInput
  friday: FridayCreateOneWithoutRestaurantsInput
  monday: MondayCreateOneWithoutRestaurantsInput
  saturday: SaturdayCreateOneWithoutRestaurantsInput
  sunday: SundayCreateOneWithoutRestaurantsInput
  thursday: ThursdayCreateOneWithoutRestaurantsInput
  tuesday: TuesdayCreateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsCreatemenuInput
  brandTile: BrandTileCreateOneWithoutRestaurantsesInput
  restaurantImages: RestaurantsCreaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsCreaterestaurantMenuInput
}

type RestaurantsEdge {
  node: Restaurants!
  cursor: String!
}

enum RestaurantsOrderByInput {
  city_ASC
  city_DESC
  id_ASC
  id_DESC
  enableLoginAccess_ASC
  enableLoginAccess_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  rating_ASC
  rating_DESC
  imageurl_ASC
  imageurl_DESC
  googlemapsurl_ASC
  googlemapsurl_DESC
  state_ASC
  state_DESC
  about_ASC
  about_DESC
  address_ASC
  address_DESC
  conditions_ASC
  conditions_DESC
  remail_ASC
  remail_DESC
  latitude_ASC
  latitude_DESC
  longitude_ASC
  longitude_DESC
  acceptsRenoPay_ASC
  acceptsRenoPay_DESC
  renoCommision_ASC
  renoCommision_DESC
  hasPickup_ASC
  hasPickup_DESC
}

type RestaurantsPreviousValues {
  city: String!
  id: ID!
  enableLoginAccess: Boolean!
  name: String!
  email: String
  password: String
  rating: Float
  imageurl: String
  googlemapsurl: String
  state: String!
  about: String
  address: String
  conditions: String
  remail: String
  rphone: [String!]!
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean!
  renoCommision: Int!
  menu: [Json!]!
  restaurantImages: [String!]!
  hasPickup: Boolean
  restaurantMenu: [String!]!
}

input RestaurantsScalarWhereInput {
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  enableLoginAccess: Boolean
  enableLoginAccess_not: Boolean
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  rating: Float
  rating_not: Float
  rating_in: [Float!]
  rating_not_in: [Float!]
  rating_lt: Float
  rating_lte: Float
  rating_gt: Float
  rating_gte: Float
  imageurl: String
  imageurl_not: String
  imageurl_in: [String!]
  imageurl_not_in: [String!]
  imageurl_lt: String
  imageurl_lte: String
  imageurl_gt: String
  imageurl_gte: String
  imageurl_contains: String
  imageurl_not_contains: String
  imageurl_starts_with: String
  imageurl_not_starts_with: String
  imageurl_ends_with: String
  imageurl_not_ends_with: String
  googlemapsurl: String
  googlemapsurl_not: String
  googlemapsurl_in: [String!]
  googlemapsurl_not_in: [String!]
  googlemapsurl_lt: String
  googlemapsurl_lte: String
  googlemapsurl_gt: String
  googlemapsurl_gte: String
  googlemapsurl_contains: String
  googlemapsurl_not_contains: String
  googlemapsurl_starts_with: String
  googlemapsurl_not_starts_with: String
  googlemapsurl_ends_with: String
  googlemapsurl_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  about: String
  about_not: String
  about_in: [String!]
  about_not_in: [String!]
  about_lt: String
  about_lte: String
  about_gt: String
  about_gte: String
  about_contains: String
  about_not_contains: String
  about_starts_with: String
  about_not_starts_with: String
  about_ends_with: String
  about_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  conditions: String
  conditions_not: String
  conditions_in: [String!]
  conditions_not_in: [String!]
  conditions_lt: String
  conditions_lte: String
  conditions_gt: String
  conditions_gte: String
  conditions_contains: String
  conditions_not_contains: String
  conditions_starts_with: String
  conditions_not_starts_with: String
  conditions_ends_with: String
  conditions_not_ends_with: String
  remail: String
  remail_not: String
  remail_in: [String!]
  remail_not_in: [String!]
  remail_lt: String
  remail_lte: String
  remail_gt: String
  remail_gte: String
  remail_contains: String
  remail_not_contains: String
  remail_starts_with: String
  remail_not_starts_with: String
  remail_ends_with: String
  remail_not_ends_with: String
  latitude: Float
  latitude_not: Float
  latitude_in: [Float!]
  latitude_not_in: [Float!]
  latitude_lt: Float
  latitude_lte: Float
  latitude_gt: Float
  latitude_gte: Float
  longitude: Float
  longitude_not: Float
  longitude_in: [Float!]
  longitude_not_in: [Float!]
  longitude_lt: Float
  longitude_lte: Float
  longitude_gt: Float
  longitude_gte: Float
  acceptsRenoPay: Boolean
  acceptsRenoPay_not: Boolean
  renoCommision: Int
  renoCommision_not: Int
  renoCommision_in: [Int!]
  renoCommision_not_in: [Int!]
  renoCommision_lt: Int
  renoCommision_lte: Int
  renoCommision_gt: Int
  renoCommision_gte: Int
  hasPickup: Boolean
  hasPickup_not: Boolean
  AND: [RestaurantsScalarWhereInput!]
  OR: [RestaurantsScalarWhereInput!]
  NOT: [RestaurantsScalarWhereInput!]
}

type RestaurantsSubscriptionPayload {
  mutation: MutationType!
  node: Restaurants
  updatedFields: [String!]
  previousValues: RestaurantsPreviousValues
}

input RestaurantsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RestaurantsWhereInput
  AND: [RestaurantsSubscriptionWhereInput!]
  OR: [RestaurantsSubscriptionWhereInput!]
  NOT: [RestaurantsSubscriptionWhereInput!]
}

input RestaurantsUpdateInput {
  city: String
  enableLoginAccess: Boolean
  name: String
  email: String
  password: String
  orderses: OrdersUpdateManyWithoutRestaurantsInput
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes: RestaurantTypeUpdateManyWithoutRestaurantsesInput
  state: String
  timeDiscounts: TimeDiscountUpdateManyWithoutRestaurantsInput
  about: String
  address: String
  userReviewses: UserReviewsUpdateManyWithoutRestaurantsInput
  hotDealses: HotDealsUpdateManyWithoutRestaurantsesInput
  conditions: String
  remail: String
  rphone: RestaurantsUpdaterphoneInput
  friday: FridayUpdateOneWithoutRestaurantsInput
  monday: MondayUpdateOneWithoutRestaurantsInput
  saturday: SaturdayUpdateOneWithoutRestaurantsInput
  sunday: SundayUpdateOneWithoutRestaurantsInput
  thursday: ThursdayUpdateOneWithoutRestaurantsInput
  tuesday: TuesdayUpdateOneWithoutRestaurantsInput
  wednesday: WednesdayUpdateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsUpdatemenuInput
  brandTile: BrandTileUpdateOneWithoutRestaurantsesInput
  restaurantImages: RestaurantsUpdaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsUpdaterestaurantMenuInput
}

input RestaurantsUpdateManyDataInput {
  city: String
  enableLoginAccess: Boolean
  name: String
  email: String
  password: String
  rating: Float
  imageurl: String
  googlemapsurl: String
  state: String
  about: String
  address: String
  conditions: String
  remail: String
  rphone: RestaurantsUpdaterphoneInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsUpdatemenuInput
  restaurantImages: RestaurantsUpdaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsUpdaterestaurantMenuInput
}

input RestaurantsUpdateManyMutationInput {
  city: String
  enableLoginAccess: Boolean
  name: String
  email: String
  password: String
  rating: Float
  imageurl: String
  googlemapsurl: String
  state: String
  about: String
  address: String
  conditions: String
  remail: String
  rphone: RestaurantsUpdaterphoneInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsUpdatemenuInput
  restaurantImages: RestaurantsUpdaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsUpdaterestaurantMenuInput
}

input RestaurantsUpdateManyWithoutBrandTileInput {
  create: [RestaurantsCreateWithoutBrandTileInput!]
  delete: [RestaurantsWhereUniqueInput!]
  connect: [RestaurantsWhereUniqueInput!]
  set: [RestaurantsWhereUniqueInput!]
  disconnect: [RestaurantsWhereUniqueInput!]
  update: [RestaurantsUpdateWithWhereUniqueWithoutBrandTileInput!]
  upsert: [RestaurantsUpsertWithWhereUniqueWithoutBrandTileInput!]
  deleteMany: [RestaurantsScalarWhereInput!]
  updateMany: [RestaurantsUpdateManyWithWhereNestedInput!]
}

input RestaurantsUpdateManyWithoutHotDealsesInput {
  create: [RestaurantsCreateWithoutHotDealsesInput!]
  delete: [RestaurantsWhereUniqueInput!]
  connect: [RestaurantsWhereUniqueInput!]
  set: [RestaurantsWhereUniqueInput!]
  disconnect: [RestaurantsWhereUniqueInput!]
  update: [RestaurantsUpdateWithWhereUniqueWithoutHotDealsesInput!]
  upsert: [RestaurantsUpsertWithWhereUniqueWithoutHotDealsesInput!]
  deleteMany: [RestaurantsScalarWhereInput!]
  updateMany: [RestaurantsUpdateManyWithWhereNestedInput!]
}

input RestaurantsUpdateManyWithoutRestaurantTypesInput {
  create: [RestaurantsCreateWithoutRestaurantTypesInput!]
  delete: [RestaurantsWhereUniqueInput!]
  connect: [RestaurantsWhereUniqueInput!]
  set: [RestaurantsWhereUniqueInput!]
  disconnect: [RestaurantsWhereUniqueInput!]
  update: [RestaurantsUpdateWithWhereUniqueWithoutRestaurantTypesInput!]
  upsert: [RestaurantsUpsertWithWhereUniqueWithoutRestaurantTypesInput!]
  deleteMany: [RestaurantsScalarWhereInput!]
  updateMany: [RestaurantsUpdateManyWithWhereNestedInput!]
}

input RestaurantsUpdateManyWithWhereNestedInput {
  where: RestaurantsScalarWhereInput!
  data: RestaurantsUpdateManyDataInput!
}

input RestaurantsUpdatemenuInput {
  set: [Json!]
}

input RestaurantsUpdateOneWithoutFridayInput {
  create: RestaurantsCreateWithoutFridayInput
  update: RestaurantsUpdateWithoutFridayDataInput
  upsert: RestaurantsUpsertWithoutFridayInput
  delete: Boolean
  disconnect: Boolean
  connect: RestaurantsWhereUniqueInput
}

input RestaurantsUpdateOneWithoutMondayInput {
  create: RestaurantsCreateWithoutMondayInput
  update: RestaurantsUpdateWithoutMondayDataInput
  upsert: RestaurantsUpsertWithoutMondayInput
  delete: Boolean
  disconnect: Boolean
  connect: RestaurantsWhereUniqueInput
}

input RestaurantsUpdateOneWithoutOrdersesInput {
  create: RestaurantsCreateWithoutOrdersesInput
  update: RestaurantsUpdateWithoutOrdersesDataInput
  upsert: RestaurantsUpsertWithoutOrdersesInput
  delete: Boolean
  disconnect: Boolean
  connect: RestaurantsWhereUniqueInput
}

input RestaurantsUpdateOneWithoutSaturdayInput {
  create: RestaurantsCreateWithoutSaturdayInput
  update: RestaurantsUpdateWithoutSaturdayDataInput
  upsert: RestaurantsUpsertWithoutSaturdayInput
  delete: Boolean
  disconnect: Boolean
  connect: RestaurantsWhereUniqueInput
}

input RestaurantsUpdateOneWithoutSundayInput {
  create: RestaurantsCreateWithoutSundayInput
  update: RestaurantsUpdateWithoutSundayDataInput
  upsert: RestaurantsUpsertWithoutSundayInput
  delete: Boolean
  disconnect: Boolean
  connect: RestaurantsWhereUniqueInput
}

input RestaurantsUpdateOneWithoutThursdayInput {
  create: RestaurantsCreateWithoutThursdayInput
  update: RestaurantsUpdateWithoutThursdayDataInput
  upsert: RestaurantsUpsertWithoutThursdayInput
  delete: Boolean
  disconnect: Boolean
  connect: RestaurantsWhereUniqueInput
}

input RestaurantsUpdateOneWithoutTimeDiscountsInput {
  create: RestaurantsCreateWithoutTimeDiscountsInput
  update: RestaurantsUpdateWithoutTimeDiscountsDataInput
  upsert: RestaurantsUpsertWithoutTimeDiscountsInput
  delete: Boolean
  disconnect: Boolean
  connect: RestaurantsWhereUniqueInput
}

input RestaurantsUpdateOneWithoutTuesdayInput {
  create: RestaurantsCreateWithoutTuesdayInput
  update: RestaurantsUpdateWithoutTuesdayDataInput
  upsert: RestaurantsUpsertWithoutTuesdayInput
  delete: Boolean
  disconnect: Boolean
  connect: RestaurantsWhereUniqueInput
}

input RestaurantsUpdateOneWithoutUserReviewsesInput {
  create: RestaurantsCreateWithoutUserReviewsesInput
  update: RestaurantsUpdateWithoutUserReviewsesDataInput
  upsert: RestaurantsUpsertWithoutUserReviewsesInput
  delete: Boolean
  disconnect: Boolean
  connect: RestaurantsWhereUniqueInput
}

input RestaurantsUpdateOneWithoutWednesdayInput {
  create: RestaurantsCreateWithoutWednesdayInput
  update: RestaurantsUpdateWithoutWednesdayDataInput
  upsert: RestaurantsUpsertWithoutWednesdayInput
  delete: Boolean
  disconnect: Boolean
  connect: RestaurantsWhereUniqueInput
}

input RestaurantsUpdaterestaurantImagesInput {
  set: [String!]
}

input RestaurantsUpdaterestaurantMenuInput {
  set: [String!]
}

input RestaurantsUpdaterphoneInput {
  set: [String!]
}

input RestaurantsUpdateWithoutBrandTileDataInput {
  city: String
  enableLoginAccess: Boolean
  name: String
  email: String
  password: String
  orderses: OrdersUpdateManyWithoutRestaurantsInput
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes: RestaurantTypeUpdateManyWithoutRestaurantsesInput
  state: String
  timeDiscounts: TimeDiscountUpdateManyWithoutRestaurantsInput
  about: String
  address: String
  userReviewses: UserReviewsUpdateManyWithoutRestaurantsInput
  hotDealses: HotDealsUpdateManyWithoutRestaurantsesInput
  conditions: String
  remail: String
  rphone: RestaurantsUpdaterphoneInput
  friday: FridayUpdateOneWithoutRestaurantsInput
  monday: MondayUpdateOneWithoutRestaurantsInput
  saturday: SaturdayUpdateOneWithoutRestaurantsInput
  sunday: SundayUpdateOneWithoutRestaurantsInput
  thursday: ThursdayUpdateOneWithoutRestaurantsInput
  tuesday: TuesdayUpdateOneWithoutRestaurantsInput
  wednesday: WednesdayUpdateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsUpdatemenuInput
  restaurantImages: RestaurantsUpdaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsUpdaterestaurantMenuInput
}

input RestaurantsUpdateWithoutFridayDataInput {
  city: String
  enableLoginAccess: Boolean
  name: String
  email: String
  password: String
  orderses: OrdersUpdateManyWithoutRestaurantsInput
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes: RestaurantTypeUpdateManyWithoutRestaurantsesInput
  state: String
  timeDiscounts: TimeDiscountUpdateManyWithoutRestaurantsInput
  about: String
  address: String
  userReviewses: UserReviewsUpdateManyWithoutRestaurantsInput
  hotDealses: HotDealsUpdateManyWithoutRestaurantsesInput
  conditions: String
  remail: String
  rphone: RestaurantsUpdaterphoneInput
  monday: MondayUpdateOneWithoutRestaurantsInput
  saturday: SaturdayUpdateOneWithoutRestaurantsInput
  sunday: SundayUpdateOneWithoutRestaurantsInput
  thursday: ThursdayUpdateOneWithoutRestaurantsInput
  tuesday: TuesdayUpdateOneWithoutRestaurantsInput
  wednesday: WednesdayUpdateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsUpdatemenuInput
  brandTile: BrandTileUpdateOneWithoutRestaurantsesInput
  restaurantImages: RestaurantsUpdaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsUpdaterestaurantMenuInput
}

input RestaurantsUpdateWithoutHotDealsesDataInput {
  city: String
  enableLoginAccess: Boolean
  name: String
  email: String
  password: String
  orderses: OrdersUpdateManyWithoutRestaurantsInput
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes: RestaurantTypeUpdateManyWithoutRestaurantsesInput
  state: String
  timeDiscounts: TimeDiscountUpdateManyWithoutRestaurantsInput
  about: String
  address: String
  userReviewses: UserReviewsUpdateManyWithoutRestaurantsInput
  conditions: String
  remail: String
  rphone: RestaurantsUpdaterphoneInput
  friday: FridayUpdateOneWithoutRestaurantsInput
  monday: MondayUpdateOneWithoutRestaurantsInput
  saturday: SaturdayUpdateOneWithoutRestaurantsInput
  sunday: SundayUpdateOneWithoutRestaurantsInput
  thursday: ThursdayUpdateOneWithoutRestaurantsInput
  tuesday: TuesdayUpdateOneWithoutRestaurantsInput
  wednesday: WednesdayUpdateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsUpdatemenuInput
  brandTile: BrandTileUpdateOneWithoutRestaurantsesInput
  restaurantImages: RestaurantsUpdaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsUpdaterestaurantMenuInput
}

input RestaurantsUpdateWithoutMondayDataInput {
  city: String
  enableLoginAccess: Boolean
  name: String
  email: String
  password: String
  orderses: OrdersUpdateManyWithoutRestaurantsInput
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes: RestaurantTypeUpdateManyWithoutRestaurantsesInput
  state: String
  timeDiscounts: TimeDiscountUpdateManyWithoutRestaurantsInput
  about: String
  address: String
  userReviewses: UserReviewsUpdateManyWithoutRestaurantsInput
  hotDealses: HotDealsUpdateManyWithoutRestaurantsesInput
  conditions: String
  remail: String
  rphone: RestaurantsUpdaterphoneInput
  friday: FridayUpdateOneWithoutRestaurantsInput
  saturday: SaturdayUpdateOneWithoutRestaurantsInput
  sunday: SundayUpdateOneWithoutRestaurantsInput
  thursday: ThursdayUpdateOneWithoutRestaurantsInput
  tuesday: TuesdayUpdateOneWithoutRestaurantsInput
  wednesday: WednesdayUpdateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsUpdatemenuInput
  brandTile: BrandTileUpdateOneWithoutRestaurantsesInput
  restaurantImages: RestaurantsUpdaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsUpdaterestaurantMenuInput
}

input RestaurantsUpdateWithoutOrdersesDataInput {
  city: String
  enableLoginAccess: Boolean
  name: String
  email: String
  password: String
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes: RestaurantTypeUpdateManyWithoutRestaurantsesInput
  state: String
  timeDiscounts: TimeDiscountUpdateManyWithoutRestaurantsInput
  about: String
  address: String
  userReviewses: UserReviewsUpdateManyWithoutRestaurantsInput
  hotDealses: HotDealsUpdateManyWithoutRestaurantsesInput
  conditions: String
  remail: String
  rphone: RestaurantsUpdaterphoneInput
  friday: FridayUpdateOneWithoutRestaurantsInput
  monday: MondayUpdateOneWithoutRestaurantsInput
  saturday: SaturdayUpdateOneWithoutRestaurantsInput
  sunday: SundayUpdateOneWithoutRestaurantsInput
  thursday: ThursdayUpdateOneWithoutRestaurantsInput
  tuesday: TuesdayUpdateOneWithoutRestaurantsInput
  wednesday: WednesdayUpdateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsUpdatemenuInput
  brandTile: BrandTileUpdateOneWithoutRestaurantsesInput
  restaurantImages: RestaurantsUpdaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsUpdaterestaurantMenuInput
}

input RestaurantsUpdateWithoutRestaurantTypesDataInput {
  city: String
  enableLoginAccess: Boolean
  name: String
  email: String
  password: String
  orderses: OrdersUpdateManyWithoutRestaurantsInput
  rating: Float
  imageurl: String
  googlemapsurl: String
  state: String
  timeDiscounts: TimeDiscountUpdateManyWithoutRestaurantsInput
  about: String
  address: String
  userReviewses: UserReviewsUpdateManyWithoutRestaurantsInput
  hotDealses: HotDealsUpdateManyWithoutRestaurantsesInput
  conditions: String
  remail: String
  rphone: RestaurantsUpdaterphoneInput
  friday: FridayUpdateOneWithoutRestaurantsInput
  monday: MondayUpdateOneWithoutRestaurantsInput
  saturday: SaturdayUpdateOneWithoutRestaurantsInput
  sunday: SundayUpdateOneWithoutRestaurantsInput
  thursday: ThursdayUpdateOneWithoutRestaurantsInput
  tuesday: TuesdayUpdateOneWithoutRestaurantsInput
  wednesday: WednesdayUpdateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsUpdatemenuInput
  brandTile: BrandTileUpdateOneWithoutRestaurantsesInput
  restaurantImages: RestaurantsUpdaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsUpdaterestaurantMenuInput
}

input RestaurantsUpdateWithoutSaturdayDataInput {
  city: String
  enableLoginAccess: Boolean
  name: String
  email: String
  password: String
  orderses: OrdersUpdateManyWithoutRestaurantsInput
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes: RestaurantTypeUpdateManyWithoutRestaurantsesInput
  state: String
  timeDiscounts: TimeDiscountUpdateManyWithoutRestaurantsInput
  about: String
  address: String
  userReviewses: UserReviewsUpdateManyWithoutRestaurantsInput
  hotDealses: HotDealsUpdateManyWithoutRestaurantsesInput
  conditions: String
  remail: String
  rphone: RestaurantsUpdaterphoneInput
  friday: FridayUpdateOneWithoutRestaurantsInput
  monday: MondayUpdateOneWithoutRestaurantsInput
  sunday: SundayUpdateOneWithoutRestaurantsInput
  thursday: ThursdayUpdateOneWithoutRestaurantsInput
  tuesday: TuesdayUpdateOneWithoutRestaurantsInput
  wednesday: WednesdayUpdateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsUpdatemenuInput
  brandTile: BrandTileUpdateOneWithoutRestaurantsesInput
  restaurantImages: RestaurantsUpdaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsUpdaterestaurantMenuInput
}

input RestaurantsUpdateWithoutSundayDataInput {
  city: String
  enableLoginAccess: Boolean
  name: String
  email: String
  password: String
  orderses: OrdersUpdateManyWithoutRestaurantsInput
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes: RestaurantTypeUpdateManyWithoutRestaurantsesInput
  state: String
  timeDiscounts: TimeDiscountUpdateManyWithoutRestaurantsInput
  about: String
  address: String
  userReviewses: UserReviewsUpdateManyWithoutRestaurantsInput
  hotDealses: HotDealsUpdateManyWithoutRestaurantsesInput
  conditions: String
  remail: String
  rphone: RestaurantsUpdaterphoneInput
  friday: FridayUpdateOneWithoutRestaurantsInput
  monday: MondayUpdateOneWithoutRestaurantsInput
  saturday: SaturdayUpdateOneWithoutRestaurantsInput
  thursday: ThursdayUpdateOneWithoutRestaurantsInput
  tuesday: TuesdayUpdateOneWithoutRestaurantsInput
  wednesday: WednesdayUpdateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsUpdatemenuInput
  brandTile: BrandTileUpdateOneWithoutRestaurantsesInput
  restaurantImages: RestaurantsUpdaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsUpdaterestaurantMenuInput
}

input RestaurantsUpdateWithoutThursdayDataInput {
  city: String
  enableLoginAccess: Boolean
  name: String
  email: String
  password: String
  orderses: OrdersUpdateManyWithoutRestaurantsInput
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes: RestaurantTypeUpdateManyWithoutRestaurantsesInput
  state: String
  timeDiscounts: TimeDiscountUpdateManyWithoutRestaurantsInput
  about: String
  address: String
  userReviewses: UserReviewsUpdateManyWithoutRestaurantsInput
  hotDealses: HotDealsUpdateManyWithoutRestaurantsesInput
  conditions: String
  remail: String
  rphone: RestaurantsUpdaterphoneInput
  friday: FridayUpdateOneWithoutRestaurantsInput
  monday: MondayUpdateOneWithoutRestaurantsInput
  saturday: SaturdayUpdateOneWithoutRestaurantsInput
  sunday: SundayUpdateOneWithoutRestaurantsInput
  tuesday: TuesdayUpdateOneWithoutRestaurantsInput
  wednesday: WednesdayUpdateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsUpdatemenuInput
  brandTile: BrandTileUpdateOneWithoutRestaurantsesInput
  restaurantImages: RestaurantsUpdaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsUpdaterestaurantMenuInput
}

input RestaurantsUpdateWithoutTimeDiscountsDataInput {
  city: String
  enableLoginAccess: Boolean
  name: String
  email: String
  password: String
  orderses: OrdersUpdateManyWithoutRestaurantsInput
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes: RestaurantTypeUpdateManyWithoutRestaurantsesInput
  state: String
  about: String
  address: String
  userReviewses: UserReviewsUpdateManyWithoutRestaurantsInput
  hotDealses: HotDealsUpdateManyWithoutRestaurantsesInput
  conditions: String
  remail: String
  rphone: RestaurantsUpdaterphoneInput
  friday: FridayUpdateOneWithoutRestaurantsInput
  monday: MondayUpdateOneWithoutRestaurantsInput
  saturday: SaturdayUpdateOneWithoutRestaurantsInput
  sunday: SundayUpdateOneWithoutRestaurantsInput
  thursday: ThursdayUpdateOneWithoutRestaurantsInput
  tuesday: TuesdayUpdateOneWithoutRestaurantsInput
  wednesday: WednesdayUpdateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsUpdatemenuInput
  brandTile: BrandTileUpdateOneWithoutRestaurantsesInput
  restaurantImages: RestaurantsUpdaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsUpdaterestaurantMenuInput
}

input RestaurantsUpdateWithoutTuesdayDataInput {
  city: String
  enableLoginAccess: Boolean
  name: String
  email: String
  password: String
  orderses: OrdersUpdateManyWithoutRestaurantsInput
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes: RestaurantTypeUpdateManyWithoutRestaurantsesInput
  state: String
  timeDiscounts: TimeDiscountUpdateManyWithoutRestaurantsInput
  about: String
  address: String
  userReviewses: UserReviewsUpdateManyWithoutRestaurantsInput
  hotDealses: HotDealsUpdateManyWithoutRestaurantsesInput
  conditions: String
  remail: String
  rphone: RestaurantsUpdaterphoneInput
  friday: FridayUpdateOneWithoutRestaurantsInput
  monday: MondayUpdateOneWithoutRestaurantsInput
  saturday: SaturdayUpdateOneWithoutRestaurantsInput
  sunday: SundayUpdateOneWithoutRestaurantsInput
  thursday: ThursdayUpdateOneWithoutRestaurantsInput
  wednesday: WednesdayUpdateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsUpdatemenuInput
  brandTile: BrandTileUpdateOneWithoutRestaurantsesInput
  restaurantImages: RestaurantsUpdaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsUpdaterestaurantMenuInput
}

input RestaurantsUpdateWithoutUserReviewsesDataInput {
  city: String
  enableLoginAccess: Boolean
  name: String
  email: String
  password: String
  orderses: OrdersUpdateManyWithoutRestaurantsInput
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes: RestaurantTypeUpdateManyWithoutRestaurantsesInput
  state: String
  timeDiscounts: TimeDiscountUpdateManyWithoutRestaurantsInput
  about: String
  address: String
  hotDealses: HotDealsUpdateManyWithoutRestaurantsesInput
  conditions: String
  remail: String
  rphone: RestaurantsUpdaterphoneInput
  friday: FridayUpdateOneWithoutRestaurantsInput
  monday: MondayUpdateOneWithoutRestaurantsInput
  saturday: SaturdayUpdateOneWithoutRestaurantsInput
  sunday: SundayUpdateOneWithoutRestaurantsInput
  thursday: ThursdayUpdateOneWithoutRestaurantsInput
  tuesday: TuesdayUpdateOneWithoutRestaurantsInput
  wednesday: WednesdayUpdateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsUpdatemenuInput
  brandTile: BrandTileUpdateOneWithoutRestaurantsesInput
  restaurantImages: RestaurantsUpdaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsUpdaterestaurantMenuInput
}

input RestaurantsUpdateWithoutWednesdayDataInput {
  city: String
  enableLoginAccess: Boolean
  name: String
  email: String
  password: String
  orderses: OrdersUpdateManyWithoutRestaurantsInput
  rating: Float
  imageurl: String
  googlemapsurl: String
  restaurantTypes: RestaurantTypeUpdateManyWithoutRestaurantsesInput
  state: String
  timeDiscounts: TimeDiscountUpdateManyWithoutRestaurantsInput
  about: String
  address: String
  userReviewses: UserReviewsUpdateManyWithoutRestaurantsInput
  hotDealses: HotDealsUpdateManyWithoutRestaurantsesInput
  conditions: String
  remail: String
  rphone: RestaurantsUpdaterphoneInput
  friday: FridayUpdateOneWithoutRestaurantsInput
  monday: MondayUpdateOneWithoutRestaurantsInput
  saturday: SaturdayUpdateOneWithoutRestaurantsInput
  sunday: SundayUpdateOneWithoutRestaurantsInput
  thursday: ThursdayUpdateOneWithoutRestaurantsInput
  tuesday: TuesdayUpdateOneWithoutRestaurantsInput
  latitude: Float
  longitude: Float
  acceptsRenoPay: Boolean
  renoCommision: Int
  menu: RestaurantsUpdatemenuInput
  brandTile: BrandTileUpdateOneWithoutRestaurantsesInput
  restaurantImages: RestaurantsUpdaterestaurantImagesInput
  hasPickup: Boolean
  restaurantMenu: RestaurantsUpdaterestaurantMenuInput
}

input RestaurantsUpdateWithWhereUniqueWithoutBrandTileInput {
  where: RestaurantsWhereUniqueInput!
  data: RestaurantsUpdateWithoutBrandTileDataInput!
}

input RestaurantsUpdateWithWhereUniqueWithoutHotDealsesInput {
  where: RestaurantsWhereUniqueInput!
  data: RestaurantsUpdateWithoutHotDealsesDataInput!
}

input RestaurantsUpdateWithWhereUniqueWithoutRestaurantTypesInput {
  where: RestaurantsWhereUniqueInput!
  data: RestaurantsUpdateWithoutRestaurantTypesDataInput!
}

input RestaurantsUpsertWithoutFridayInput {
  update: RestaurantsUpdateWithoutFridayDataInput!
  create: RestaurantsCreateWithoutFridayInput!
}

input RestaurantsUpsertWithoutMondayInput {
  update: RestaurantsUpdateWithoutMondayDataInput!
  create: RestaurantsCreateWithoutMondayInput!
}

input RestaurantsUpsertWithoutOrdersesInput {
  update: RestaurantsUpdateWithoutOrdersesDataInput!
  create: RestaurantsCreateWithoutOrdersesInput!
}

input RestaurantsUpsertWithoutSaturdayInput {
  update: RestaurantsUpdateWithoutSaturdayDataInput!
  create: RestaurantsCreateWithoutSaturdayInput!
}

input RestaurantsUpsertWithoutSundayInput {
  update: RestaurantsUpdateWithoutSundayDataInput!
  create: RestaurantsCreateWithoutSundayInput!
}

input RestaurantsUpsertWithoutThursdayInput {
  update: RestaurantsUpdateWithoutThursdayDataInput!
  create: RestaurantsCreateWithoutThursdayInput!
}

input RestaurantsUpsertWithoutTimeDiscountsInput {
  update: RestaurantsUpdateWithoutTimeDiscountsDataInput!
  create: RestaurantsCreateWithoutTimeDiscountsInput!
}

input RestaurantsUpsertWithoutTuesdayInput {
  update: RestaurantsUpdateWithoutTuesdayDataInput!
  create: RestaurantsCreateWithoutTuesdayInput!
}

input RestaurantsUpsertWithoutUserReviewsesInput {
  update: RestaurantsUpdateWithoutUserReviewsesDataInput!
  create: RestaurantsCreateWithoutUserReviewsesInput!
}

input RestaurantsUpsertWithoutWednesdayInput {
  update: RestaurantsUpdateWithoutWednesdayDataInput!
  create: RestaurantsCreateWithoutWednesdayInput!
}

input RestaurantsUpsertWithWhereUniqueWithoutBrandTileInput {
  where: RestaurantsWhereUniqueInput!
  update: RestaurantsUpdateWithoutBrandTileDataInput!
  create: RestaurantsCreateWithoutBrandTileInput!
}

input RestaurantsUpsertWithWhereUniqueWithoutHotDealsesInput {
  where: RestaurantsWhereUniqueInput!
  update: RestaurantsUpdateWithoutHotDealsesDataInput!
  create: RestaurantsCreateWithoutHotDealsesInput!
}

input RestaurantsUpsertWithWhereUniqueWithoutRestaurantTypesInput {
  where: RestaurantsWhereUniqueInput!
  update: RestaurantsUpdateWithoutRestaurantTypesDataInput!
  create: RestaurantsCreateWithoutRestaurantTypesInput!
}

input RestaurantsWhereInput {
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  enableLoginAccess: Boolean
  enableLoginAccess_not: Boolean
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  orderses_every: OrdersWhereInput
  orderses_some: OrdersWhereInput
  orderses_none: OrdersWhereInput
  rating: Float
  rating_not: Float
  rating_in: [Float!]
  rating_not_in: [Float!]
  rating_lt: Float
  rating_lte: Float
  rating_gt: Float
  rating_gte: Float
  imageurl: String
  imageurl_not: String
  imageurl_in: [String!]
  imageurl_not_in: [String!]
  imageurl_lt: String
  imageurl_lte: String
  imageurl_gt: String
  imageurl_gte: String
  imageurl_contains: String
  imageurl_not_contains: String
  imageurl_starts_with: String
  imageurl_not_starts_with: String
  imageurl_ends_with: String
  imageurl_not_ends_with: String
  googlemapsurl: String
  googlemapsurl_not: String
  googlemapsurl_in: [String!]
  googlemapsurl_not_in: [String!]
  googlemapsurl_lt: String
  googlemapsurl_lte: String
  googlemapsurl_gt: String
  googlemapsurl_gte: String
  googlemapsurl_contains: String
  googlemapsurl_not_contains: String
  googlemapsurl_starts_with: String
  googlemapsurl_not_starts_with: String
  googlemapsurl_ends_with: String
  googlemapsurl_not_ends_with: String
  restaurantTypes_every: RestaurantTypeWhereInput
  restaurantTypes_some: RestaurantTypeWhereInput
  restaurantTypes_none: RestaurantTypeWhereInput
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  timeDiscounts_every: TimeDiscountWhereInput
  timeDiscounts_some: TimeDiscountWhereInput
  timeDiscounts_none: TimeDiscountWhereInput
  about: String
  about_not: String
  about_in: [String!]
  about_not_in: [String!]
  about_lt: String
  about_lte: String
  about_gt: String
  about_gte: String
  about_contains: String
  about_not_contains: String
  about_starts_with: String
  about_not_starts_with: String
  about_ends_with: String
  about_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  userReviewses_every: UserReviewsWhereInput
  userReviewses_some: UserReviewsWhereInput
  userReviewses_none: UserReviewsWhereInput
  hotDealses_every: HotDealsWhereInput
  hotDealses_some: HotDealsWhereInput
  hotDealses_none: HotDealsWhereInput
  conditions: String
  conditions_not: String
  conditions_in: [String!]
  conditions_not_in: [String!]
  conditions_lt: String
  conditions_lte: String
  conditions_gt: String
  conditions_gte: String
  conditions_contains: String
  conditions_not_contains: String
  conditions_starts_with: String
  conditions_not_starts_with: String
  conditions_ends_with: String
  conditions_not_ends_with: String
  remail: String
  remail_not: String
  remail_in: [String!]
  remail_not_in: [String!]
  remail_lt: String
  remail_lte: String
  remail_gt: String
  remail_gte: String
  remail_contains: String
  remail_not_contains: String
  remail_starts_with: String
  remail_not_starts_with: String
  remail_ends_with: String
  remail_not_ends_with: String
  friday: FridayWhereInput
  monday: MondayWhereInput
  saturday: SaturdayWhereInput
  sunday: SundayWhereInput
  thursday: ThursdayWhereInput
  tuesday: TuesdayWhereInput
  wednesday: WednesdayWhereInput
  latitude: Float
  latitude_not: Float
  latitude_in: [Float!]
  latitude_not_in: [Float!]
  latitude_lt: Float
  latitude_lte: Float
  latitude_gt: Float
  latitude_gte: Float
  longitude: Float
  longitude_not: Float
  longitude_in: [Float!]
  longitude_not_in: [Float!]
  longitude_lt: Float
  longitude_lte: Float
  longitude_gt: Float
  longitude_gte: Float
  acceptsRenoPay: Boolean
  acceptsRenoPay_not: Boolean
  renoCommision: Int
  renoCommision_not: Int
  renoCommision_in: [Int!]
  renoCommision_not_in: [Int!]
  renoCommision_lt: Int
  renoCommision_lte: Int
  renoCommision_gt: Int
  renoCommision_gte: Int
  brandTile: BrandTileWhereInput
  hasPickup: Boolean
  hasPickup_not: Boolean
  AND: [RestaurantsWhereInput!]
  OR: [RestaurantsWhereInput!]
  NOT: [RestaurantsWhereInput!]
}

input RestaurantsWhereUniqueInput {
  id: ID
  email: String
  password: String
}

type RestaurantType {
  id: ID!
  restaurantses(where: RestaurantsWhereInput, orderBy: RestaurantsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Restaurants!]
  type: String!
  imageurl: String
  order: Int
  typeName: String
  cityImage: String
  activatePremium: Boolean
  premiumPrice: Int
}

type RestaurantTypeConnection {
  pageInfo: PageInfo!
  edges: [RestaurantTypeEdge]!
  aggregate: AggregateRestaurantType!
}

input RestaurantTypeCreateInput {
  id: ID
  restaurantses: RestaurantsCreateManyWithoutRestaurantTypesInput
  type: String!
  imageurl: String
  order: Int
  typeName: String
  cityImage: String
  activatePremium: Boolean
  premiumPrice: Int
}

input RestaurantTypeCreateManyWithoutRestaurantsesInput {
  create: [RestaurantTypeCreateWithoutRestaurantsesInput!]
  connect: [RestaurantTypeWhereUniqueInput!]
}

input RestaurantTypeCreateWithoutRestaurantsesInput {
  id: ID
  type: String!
  imageurl: String
  order: Int
  typeName: String
  cityImage: String
  activatePremium: Boolean
  premiumPrice: Int
}

type RestaurantTypeEdge {
  node: RestaurantType!
  cursor: String!
}

enum RestaurantTypeOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  imageurl_ASC
  imageurl_DESC
  order_ASC
  order_DESC
  typeName_ASC
  typeName_DESC
  cityImage_ASC
  cityImage_DESC
  activatePremium_ASC
  activatePremium_DESC
  premiumPrice_ASC
  premiumPrice_DESC
}

type RestaurantTypePreviousValues {
  id: ID!
  type: String!
  imageurl: String
  order: Int
  typeName: String
  cityImage: String
  activatePremium: Boolean
  premiumPrice: Int
}

input RestaurantTypeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  imageurl: String
  imageurl_not: String
  imageurl_in: [String!]
  imageurl_not_in: [String!]
  imageurl_lt: String
  imageurl_lte: String
  imageurl_gt: String
  imageurl_gte: String
  imageurl_contains: String
  imageurl_not_contains: String
  imageurl_starts_with: String
  imageurl_not_starts_with: String
  imageurl_ends_with: String
  imageurl_not_ends_with: String
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  typeName: String
  typeName_not: String
  typeName_in: [String!]
  typeName_not_in: [String!]
  typeName_lt: String
  typeName_lte: String
  typeName_gt: String
  typeName_gte: String
  typeName_contains: String
  typeName_not_contains: String
  typeName_starts_with: String
  typeName_not_starts_with: String
  typeName_ends_with: String
  typeName_not_ends_with: String
  cityImage: String
  cityImage_not: String
  cityImage_in: [String!]
  cityImage_not_in: [String!]
  cityImage_lt: String
  cityImage_lte: String
  cityImage_gt: String
  cityImage_gte: String
  cityImage_contains: String
  cityImage_not_contains: String
  cityImage_starts_with: String
  cityImage_not_starts_with: String
  cityImage_ends_with: String
  cityImage_not_ends_with: String
  activatePremium: Boolean
  activatePremium_not: Boolean
  premiumPrice: Int
  premiumPrice_not: Int
  premiumPrice_in: [Int!]
  premiumPrice_not_in: [Int!]
  premiumPrice_lt: Int
  premiumPrice_lte: Int
  premiumPrice_gt: Int
  premiumPrice_gte: Int
  AND: [RestaurantTypeScalarWhereInput!]
  OR: [RestaurantTypeScalarWhereInput!]
  NOT: [RestaurantTypeScalarWhereInput!]
}

type RestaurantTypeSubscriptionPayload {
  mutation: MutationType!
  node: RestaurantType
  updatedFields: [String!]
  previousValues: RestaurantTypePreviousValues
}

input RestaurantTypeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RestaurantTypeWhereInput
  AND: [RestaurantTypeSubscriptionWhereInput!]
  OR: [RestaurantTypeSubscriptionWhereInput!]
  NOT: [RestaurantTypeSubscriptionWhereInput!]
}

input RestaurantTypeUpdateInput {
  restaurantses: RestaurantsUpdateManyWithoutRestaurantTypesInput
  type: String
  imageurl: String
  order: Int
  typeName: String
  cityImage: String
  activatePremium: Boolean
  premiumPrice: Int
}

input RestaurantTypeUpdateManyDataInput {
  type: String
  imageurl: String
  order: Int
  typeName: String
  cityImage: String
  activatePremium: Boolean
  premiumPrice: Int
}

input RestaurantTypeUpdateManyMutationInput {
  type: String
  imageurl: String
  order: Int
  typeName: String
  cityImage: String
  activatePremium: Boolean
  premiumPrice: Int
}

input RestaurantTypeUpdateManyWithoutRestaurantsesInput {
  create: [RestaurantTypeCreateWithoutRestaurantsesInput!]
  delete: [RestaurantTypeWhereUniqueInput!]
  connect: [RestaurantTypeWhereUniqueInput!]
  set: [RestaurantTypeWhereUniqueInput!]
  disconnect: [RestaurantTypeWhereUniqueInput!]
  update: [RestaurantTypeUpdateWithWhereUniqueWithoutRestaurantsesInput!]
  upsert: [RestaurantTypeUpsertWithWhereUniqueWithoutRestaurantsesInput!]
  deleteMany: [RestaurantTypeScalarWhereInput!]
  updateMany: [RestaurantTypeUpdateManyWithWhereNestedInput!]
}

input RestaurantTypeUpdateManyWithWhereNestedInput {
  where: RestaurantTypeScalarWhereInput!
  data: RestaurantTypeUpdateManyDataInput!
}

input RestaurantTypeUpdateWithoutRestaurantsesDataInput {
  type: String
  imageurl: String
  order: Int
  typeName: String
  cityImage: String
  activatePremium: Boolean
  premiumPrice: Int
}

input RestaurantTypeUpdateWithWhereUniqueWithoutRestaurantsesInput {
  where: RestaurantTypeWhereUniqueInput!
  data: RestaurantTypeUpdateWithoutRestaurantsesDataInput!
}

input RestaurantTypeUpsertWithWhereUniqueWithoutRestaurantsesInput {
  where: RestaurantTypeWhereUniqueInput!
  update: RestaurantTypeUpdateWithoutRestaurantsesDataInput!
  create: RestaurantTypeCreateWithoutRestaurantsesInput!
}

input RestaurantTypeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  restaurantses_every: RestaurantsWhereInput
  restaurantses_some: RestaurantsWhereInput
  restaurantses_none: RestaurantsWhereInput
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  imageurl: String
  imageurl_not: String
  imageurl_in: [String!]
  imageurl_not_in: [String!]
  imageurl_lt: String
  imageurl_lte: String
  imageurl_gt: String
  imageurl_gte: String
  imageurl_contains: String
  imageurl_not_contains: String
  imageurl_starts_with: String
  imageurl_not_starts_with: String
  imageurl_ends_with: String
  imageurl_not_ends_with: String
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  typeName: String
  typeName_not: String
  typeName_in: [String!]
  typeName_not_in: [String!]
  typeName_lt: String
  typeName_lte: String
  typeName_gt: String
  typeName_gte: String
  typeName_contains: String
  typeName_not_contains: String
  typeName_starts_with: String
  typeName_not_starts_with: String
  typeName_ends_with: String
  typeName_not_ends_with: String
  cityImage: String
  cityImage_not: String
  cityImage_in: [String!]
  cityImage_not_in: [String!]
  cityImage_lt: String
  cityImage_lte: String
  cityImage_gt: String
  cityImage_gte: String
  cityImage_contains: String
  cityImage_not_contains: String
  cityImage_starts_with: String
  cityImage_not_starts_with: String
  cityImage_ends_with: String
  cityImage_not_ends_with: String
  activatePremium: Boolean
  activatePremium_not: Boolean
  premiumPrice: Int
  premiumPrice_not: Int
  premiumPrice_in: [Int!]
  premiumPrice_not_in: [Int!]
  premiumPrice_lt: Int
  premiumPrice_lte: Int
  premiumPrice_gt: Int
  premiumPrice_gte: Int
  AND: [RestaurantTypeWhereInput!]
  OR: [RestaurantTypeWhereInput!]
  NOT: [RestaurantTypeWhereInput!]
}

input RestaurantTypeWhereUniqueInput {
  id: ID
}

type Saturday {
  exhausted: Boolean!
  id: ID!
  restaurants: Restaurants
  timeDiscounts(where: TimeDiscountWhereInput, orderBy: TimeDiscountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeDiscount!]
  order: Int
}

type SaturdayConnection {
  pageInfo: PageInfo!
  edges: [SaturdayEdge]!
  aggregate: AggregateSaturday!
}

input SaturdayCreateInput {
  exhausted: Boolean
  id: ID
  restaurants: RestaurantsCreateOneWithoutSaturdayInput
  timeDiscounts: TimeDiscountCreateManyWithoutSaturdayInput
  order: Int
}

input SaturdayCreateOneWithoutRestaurantsInput {
  create: SaturdayCreateWithoutRestaurantsInput
  connect: SaturdayWhereUniqueInput
}

input SaturdayCreateOneWithoutTimeDiscountsInput {
  create: SaturdayCreateWithoutTimeDiscountsInput
  connect: SaturdayWhereUniqueInput
}

input SaturdayCreateWithoutRestaurantsInput {
  exhausted: Boolean
  id: ID
  timeDiscounts: TimeDiscountCreateManyWithoutSaturdayInput
  order: Int
}

input SaturdayCreateWithoutTimeDiscountsInput {
  exhausted: Boolean
  id: ID
  restaurants: RestaurantsCreateOneWithoutSaturdayInput
  order: Int
}

type SaturdayEdge {
  node: Saturday!
  cursor: String!
}

enum SaturdayOrderByInput {
  exhausted_ASC
  exhausted_DESC
  id_ASC
  id_DESC
  order_ASC
  order_DESC
}

type SaturdayPreviousValues {
  exhausted: Boolean!
  id: ID!
  order: Int
}

type SaturdaySubscriptionPayload {
  mutation: MutationType!
  node: Saturday
  updatedFields: [String!]
  previousValues: SaturdayPreviousValues
}

input SaturdaySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SaturdayWhereInput
  AND: [SaturdaySubscriptionWhereInput!]
  OR: [SaturdaySubscriptionWhereInput!]
  NOT: [SaturdaySubscriptionWhereInput!]
}

input SaturdayUpdateInput {
  exhausted: Boolean
  restaurants: RestaurantsUpdateOneWithoutSaturdayInput
  timeDiscounts: TimeDiscountUpdateManyWithoutSaturdayInput
  order: Int
}

input SaturdayUpdateManyMutationInput {
  exhausted: Boolean
  order: Int
}

input SaturdayUpdateOneWithoutRestaurantsInput {
  create: SaturdayCreateWithoutRestaurantsInput
  update: SaturdayUpdateWithoutRestaurantsDataInput
  upsert: SaturdayUpsertWithoutRestaurantsInput
  delete: Boolean
  disconnect: Boolean
  connect: SaturdayWhereUniqueInput
}

input SaturdayUpdateOneWithoutTimeDiscountsInput {
  create: SaturdayCreateWithoutTimeDiscountsInput
  update: SaturdayUpdateWithoutTimeDiscountsDataInput
  upsert: SaturdayUpsertWithoutTimeDiscountsInput
  delete: Boolean
  disconnect: Boolean
  connect: SaturdayWhereUniqueInput
}

input SaturdayUpdateWithoutRestaurantsDataInput {
  exhausted: Boolean
  timeDiscounts: TimeDiscountUpdateManyWithoutSaturdayInput
  order: Int
}

input SaturdayUpdateWithoutTimeDiscountsDataInput {
  exhausted: Boolean
  restaurants: RestaurantsUpdateOneWithoutSaturdayInput
  order: Int
}

input SaturdayUpsertWithoutRestaurantsInput {
  update: SaturdayUpdateWithoutRestaurantsDataInput!
  create: SaturdayCreateWithoutRestaurantsInput!
}

input SaturdayUpsertWithoutTimeDiscountsInput {
  update: SaturdayUpdateWithoutTimeDiscountsDataInput!
  create: SaturdayCreateWithoutTimeDiscountsInput!
}

input SaturdayWhereInput {
  exhausted: Boolean
  exhausted_not: Boolean
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  restaurants: RestaurantsWhereInput
  timeDiscounts_every: TimeDiscountWhereInput
  timeDiscounts_some: TimeDiscountWhereInput
  timeDiscounts_none: TimeDiscountWhereInput
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  AND: [SaturdayWhereInput!]
  OR: [SaturdayWhereInput!]
  NOT: [SaturdayWhereInput!]
}

input SaturdayWhereUniqueInput {
  id: ID
}

type Subscription {
  ads(where: AdsSubscriptionWhereInput): AdsSubscriptionPayload
  blog(where: BlogSubscriptionWhereInput): BlogSubscriptionPayload
  brandTile(where: BrandTileSubscriptionWhereInput): BrandTileSubscriptionPayload
  contacts(where: ContactsSubscriptionWhereInput): ContactsSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  friday(where: FridaySubscriptionWhereInput): FridaySubscriptionPayload
  hotDeals(where: HotDealsSubscriptionWhereInput): HotDealsSubscriptionPayload
  misc(where: MiscSubscriptionWhereInput): MiscSubscriptionPayload
  monday(where: MondaySubscriptionWhereInput): MondaySubscriptionPayload
  orders(where: OrdersSubscriptionWhereInput): OrdersSubscriptionPayload
  renoPass(where: RenoPassSubscriptionWhereInput): RenoPassSubscriptionPayload
  restaurantType(where: RestaurantTypeSubscriptionWhereInput): RestaurantTypeSubscriptionPayload
  restaurants(where: RestaurantsSubscriptionWhereInput): RestaurantsSubscriptionPayload
  saturday(where: SaturdaySubscriptionWhereInput): SaturdaySubscriptionPayload
  sunday(where: SundaySubscriptionWhereInput): SundaySubscriptionPayload
  thursday(where: ThursdaySubscriptionWhereInput): ThursdaySubscriptionPayload
  timeDiscount(where: TimeDiscountSubscriptionWhereInput): TimeDiscountSubscriptionPayload
  tuesday(where: TuesdaySubscriptionWhereInput): TuesdaySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  userReviews(where: UserReviewsSubscriptionWhereInput): UserReviewsSubscriptionPayload
  wednesday(where: WednesdaySubscriptionWhereInput): WednesdaySubscriptionPayload
  city(where: citySubscriptionWhereInput): citySubscriptionPayload
}

type Sunday {
  exhausted: Boolean!
  id: ID!
  restaurants: Restaurants
  timeDiscounts(where: TimeDiscountWhereInput, orderBy: TimeDiscountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeDiscount!]
  order: Int
}

type SundayConnection {
  pageInfo: PageInfo!
  edges: [SundayEdge]!
  aggregate: AggregateSunday!
}

input SundayCreateInput {
  exhausted: Boolean
  id: ID
  restaurants: RestaurantsCreateOneWithoutSundayInput
  timeDiscounts: TimeDiscountCreateManyWithoutSundayInput
  order: Int
}

input SundayCreateOneWithoutRestaurantsInput {
  create: SundayCreateWithoutRestaurantsInput
  connect: SundayWhereUniqueInput
}

input SundayCreateOneWithoutTimeDiscountsInput {
  create: SundayCreateWithoutTimeDiscountsInput
  connect: SundayWhereUniqueInput
}

input SundayCreateWithoutRestaurantsInput {
  exhausted: Boolean
  id: ID
  timeDiscounts: TimeDiscountCreateManyWithoutSundayInput
  order: Int
}

input SundayCreateWithoutTimeDiscountsInput {
  exhausted: Boolean
  id: ID
  restaurants: RestaurantsCreateOneWithoutSundayInput
  order: Int
}

type SundayEdge {
  node: Sunday!
  cursor: String!
}

enum SundayOrderByInput {
  exhausted_ASC
  exhausted_DESC
  id_ASC
  id_DESC
  order_ASC
  order_DESC
}

type SundayPreviousValues {
  exhausted: Boolean!
  id: ID!
  order: Int
}

type SundaySubscriptionPayload {
  mutation: MutationType!
  node: Sunday
  updatedFields: [String!]
  previousValues: SundayPreviousValues
}

input SundaySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SundayWhereInput
  AND: [SundaySubscriptionWhereInput!]
  OR: [SundaySubscriptionWhereInput!]
  NOT: [SundaySubscriptionWhereInput!]
}

input SundayUpdateInput {
  exhausted: Boolean
  restaurants: RestaurantsUpdateOneWithoutSundayInput
  timeDiscounts: TimeDiscountUpdateManyWithoutSundayInput
  order: Int
}

input SundayUpdateManyMutationInput {
  exhausted: Boolean
  order: Int
}

input SundayUpdateOneWithoutRestaurantsInput {
  create: SundayCreateWithoutRestaurantsInput
  update: SundayUpdateWithoutRestaurantsDataInput
  upsert: SundayUpsertWithoutRestaurantsInput
  delete: Boolean
  disconnect: Boolean
  connect: SundayWhereUniqueInput
}

input SundayUpdateOneWithoutTimeDiscountsInput {
  create: SundayCreateWithoutTimeDiscountsInput
  update: SundayUpdateWithoutTimeDiscountsDataInput
  upsert: SundayUpsertWithoutTimeDiscountsInput
  delete: Boolean
  disconnect: Boolean
  connect: SundayWhereUniqueInput
}

input SundayUpdateWithoutRestaurantsDataInput {
  exhausted: Boolean
  timeDiscounts: TimeDiscountUpdateManyWithoutSundayInput
  order: Int
}

input SundayUpdateWithoutTimeDiscountsDataInput {
  exhausted: Boolean
  restaurants: RestaurantsUpdateOneWithoutSundayInput
  order: Int
}

input SundayUpsertWithoutRestaurantsInput {
  update: SundayUpdateWithoutRestaurantsDataInput!
  create: SundayCreateWithoutRestaurantsInput!
}

input SundayUpsertWithoutTimeDiscountsInput {
  update: SundayUpdateWithoutTimeDiscountsDataInput!
  create: SundayCreateWithoutTimeDiscountsInput!
}

input SundayWhereInput {
  exhausted: Boolean
  exhausted_not: Boolean
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  restaurants: RestaurantsWhereInput
  timeDiscounts_every: TimeDiscountWhereInput
  timeDiscounts_some: TimeDiscountWhereInput
  timeDiscounts_none: TimeDiscountWhereInput
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  AND: [SundayWhereInput!]
  OR: [SundayWhereInput!]
  NOT: [SundayWhereInput!]
}

input SundayWhereUniqueInput {
  id: ID
}

type Thursday {
  exhausted: Boolean!
  id: ID!
  order: Int
  restaurants: Restaurants
  timeDiscounts(where: TimeDiscountWhereInput, orderBy: TimeDiscountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeDiscount!]
}

type ThursdayConnection {
  pageInfo: PageInfo!
  edges: [ThursdayEdge]!
  aggregate: AggregateThursday!
}

input ThursdayCreateInput {
  exhausted: Boolean
  id: ID
  order: Int
  restaurants: RestaurantsCreateOneWithoutThursdayInput
  timeDiscounts: TimeDiscountCreateManyWithoutThursdayInput
}

input ThursdayCreateOneWithoutRestaurantsInput {
  create: ThursdayCreateWithoutRestaurantsInput
  connect: ThursdayWhereUniqueInput
}

input ThursdayCreateOneWithoutTimeDiscountsInput {
  create: ThursdayCreateWithoutTimeDiscountsInput
  connect: ThursdayWhereUniqueInput
}

input ThursdayCreateWithoutRestaurantsInput {
  exhausted: Boolean
  id: ID
  order: Int
  timeDiscounts: TimeDiscountCreateManyWithoutThursdayInput
}

input ThursdayCreateWithoutTimeDiscountsInput {
  exhausted: Boolean
  id: ID
  order: Int
  restaurants: RestaurantsCreateOneWithoutThursdayInput
}

type ThursdayEdge {
  node: Thursday!
  cursor: String!
}

enum ThursdayOrderByInput {
  exhausted_ASC
  exhausted_DESC
  id_ASC
  id_DESC
  order_ASC
  order_DESC
}

type ThursdayPreviousValues {
  exhausted: Boolean!
  id: ID!
  order: Int
}

type ThursdaySubscriptionPayload {
  mutation: MutationType!
  node: Thursday
  updatedFields: [String!]
  previousValues: ThursdayPreviousValues
}

input ThursdaySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ThursdayWhereInput
  AND: [ThursdaySubscriptionWhereInput!]
  OR: [ThursdaySubscriptionWhereInput!]
  NOT: [ThursdaySubscriptionWhereInput!]
}

input ThursdayUpdateInput {
  exhausted: Boolean
  order: Int
  restaurants: RestaurantsUpdateOneWithoutThursdayInput
  timeDiscounts: TimeDiscountUpdateManyWithoutThursdayInput
}

input ThursdayUpdateManyMutationInput {
  exhausted: Boolean
  order: Int
}

input ThursdayUpdateOneWithoutRestaurantsInput {
  create: ThursdayCreateWithoutRestaurantsInput
  update: ThursdayUpdateWithoutRestaurantsDataInput
  upsert: ThursdayUpsertWithoutRestaurantsInput
  delete: Boolean
  disconnect: Boolean
  connect: ThursdayWhereUniqueInput
}

input ThursdayUpdateOneWithoutTimeDiscountsInput {
  create: ThursdayCreateWithoutTimeDiscountsInput
  update: ThursdayUpdateWithoutTimeDiscountsDataInput
  upsert: ThursdayUpsertWithoutTimeDiscountsInput
  delete: Boolean
  disconnect: Boolean
  connect: ThursdayWhereUniqueInput
}

input ThursdayUpdateWithoutRestaurantsDataInput {
  exhausted: Boolean
  order: Int
  timeDiscounts: TimeDiscountUpdateManyWithoutThursdayInput
}

input ThursdayUpdateWithoutTimeDiscountsDataInput {
  exhausted: Boolean
  order: Int
  restaurants: RestaurantsUpdateOneWithoutThursdayInput
}

input ThursdayUpsertWithoutRestaurantsInput {
  update: ThursdayUpdateWithoutRestaurantsDataInput!
  create: ThursdayCreateWithoutRestaurantsInput!
}

input ThursdayUpsertWithoutTimeDiscountsInput {
  update: ThursdayUpdateWithoutTimeDiscountsDataInput!
  create: ThursdayCreateWithoutTimeDiscountsInput!
}

input ThursdayWhereInput {
  exhausted: Boolean
  exhausted_not: Boolean
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  restaurants: RestaurantsWhereInput
  timeDiscounts_every: TimeDiscountWhereInput
  timeDiscounts_some: TimeDiscountWhereInput
  timeDiscounts_none: TimeDiscountWhereInput
  AND: [ThursdayWhereInput!]
  OR: [ThursdayWhereInput!]
  NOT: [ThursdayWhereInput!]
}

input ThursdayWhereUniqueInput {
  id: ID
}

type TimeDiscount {
  discount: Float!
  id: ID!
  orderses(where: OrdersWhereInput, orderBy: OrdersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Orders!]
  restaurants: Restaurants
  time: String!
  daychange: Boolean
  day: Boolean
  newtime: String
  newdiscount: String
  friday: Friday
  monday: Monday
  saturday: Saturday
  sunday: Sunday
  thursday: Thursday
  tuesday: Tuesday
  wednesday: Wednesday
  exhausted: Boolean
  tueExhaust: Boolean!
  monExhaust: Boolean!
  wedExhaust: Boolean!
  thuExhaust: Boolean!
  friExhaust: Boolean!
  satExhaust: Boolean!
  sunExhaust: Boolean!
  monDiscount: Float!
  tueDiscount: Float!
  wedDiscount: Float!
  thuDiscount: Float!
  friDiscount: Float!
  satDiscount: Float!
  sunDiscount: Float!
}

type TimeDiscountConnection {
  pageInfo: PageInfo!
  edges: [TimeDiscountEdge]!
  aggregate: AggregateTimeDiscount!
}

input TimeDiscountCreateInput {
  discount: Float!
  id: ID
  orderses: OrdersCreateManyWithoutTimeDiscountInput
  restaurants: RestaurantsCreateOneWithoutTimeDiscountsInput
  time: String!
  daychange: Boolean
  day: Boolean
  newtime: String
  newdiscount: String
  friday: FridayCreateOneWithoutTimeDiscountsInput
  monday: MondayCreateOneWithoutTimeDiscountsInput
  saturday: SaturdayCreateOneWithoutTimeDiscountsInput
  sunday: SundayCreateOneWithoutTimeDiscountsInput
  thursday: ThursdayCreateOneWithoutTimeDiscountsInput
  tuesday: TuesdayCreateOneWithoutTimeDiscountsInput
  wednesday: WednesdayCreateOneWithoutTimeDiscountsInput
  exhausted: Boolean
  tueExhaust: Boolean
  monExhaust: Boolean
  wedExhaust: Boolean
  thuExhaust: Boolean
  friExhaust: Boolean
  satExhaust: Boolean
  sunExhaust: Boolean
  monDiscount: Float
  tueDiscount: Float
  wedDiscount: Float
  thuDiscount: Float
  friDiscount: Float
  satDiscount: Float
  sunDiscount: Float
}

input TimeDiscountCreateManyWithoutFridayInput {
  create: [TimeDiscountCreateWithoutFridayInput!]
  connect: [TimeDiscountWhereUniqueInput!]
}

input TimeDiscountCreateManyWithoutMondayInput {
  create: [TimeDiscountCreateWithoutMondayInput!]
  connect: [TimeDiscountWhereUniqueInput!]
}

input TimeDiscountCreateManyWithoutRestaurantsInput {
  create: [TimeDiscountCreateWithoutRestaurantsInput!]
  connect: [TimeDiscountWhereUniqueInput!]
}

input TimeDiscountCreateManyWithoutSaturdayInput {
  create: [TimeDiscountCreateWithoutSaturdayInput!]
  connect: [TimeDiscountWhereUniqueInput!]
}

input TimeDiscountCreateManyWithoutSundayInput {
  create: [TimeDiscountCreateWithoutSundayInput!]
  connect: [TimeDiscountWhereUniqueInput!]
}

input TimeDiscountCreateManyWithoutThursdayInput {
  create: [TimeDiscountCreateWithoutThursdayInput!]
  connect: [TimeDiscountWhereUniqueInput!]
}

input TimeDiscountCreateManyWithoutTuesdayInput {
  create: [TimeDiscountCreateWithoutTuesdayInput!]
  connect: [TimeDiscountWhereUniqueInput!]
}

input TimeDiscountCreateManyWithoutWednesdayInput {
  create: [TimeDiscountCreateWithoutWednesdayInput!]
  connect: [TimeDiscountWhereUniqueInput!]
}

input TimeDiscountCreateOneWithoutOrdersesInput {
  create: TimeDiscountCreateWithoutOrdersesInput
  connect: TimeDiscountWhereUniqueInput
}

input TimeDiscountCreateWithoutFridayInput {
  discount: Float!
  id: ID
  orderses: OrdersCreateManyWithoutTimeDiscountInput
  restaurants: RestaurantsCreateOneWithoutTimeDiscountsInput
  time: String!
  daychange: Boolean
  day: Boolean
  newtime: String
  newdiscount: String
  monday: MondayCreateOneWithoutTimeDiscountsInput
  saturday: SaturdayCreateOneWithoutTimeDiscountsInput
  sunday: SundayCreateOneWithoutTimeDiscountsInput
  thursday: ThursdayCreateOneWithoutTimeDiscountsInput
  tuesday: TuesdayCreateOneWithoutTimeDiscountsInput
  wednesday: WednesdayCreateOneWithoutTimeDiscountsInput
  exhausted: Boolean
  tueExhaust: Boolean
  monExhaust: Boolean
  wedExhaust: Boolean
  thuExhaust: Boolean
  friExhaust: Boolean
  satExhaust: Boolean
  sunExhaust: Boolean
  monDiscount: Float
  tueDiscount: Float
  wedDiscount: Float
  thuDiscount: Float
  friDiscount: Float
  satDiscount: Float
  sunDiscount: Float
}

input TimeDiscountCreateWithoutMondayInput {
  discount: Float!
  id: ID
  orderses: OrdersCreateManyWithoutTimeDiscountInput
  restaurants: RestaurantsCreateOneWithoutTimeDiscountsInput
  time: String!
  daychange: Boolean
  day: Boolean
  newtime: String
  newdiscount: String
  friday: FridayCreateOneWithoutTimeDiscountsInput
  saturday: SaturdayCreateOneWithoutTimeDiscountsInput
  sunday: SundayCreateOneWithoutTimeDiscountsInput
  thursday: ThursdayCreateOneWithoutTimeDiscountsInput
  tuesday: TuesdayCreateOneWithoutTimeDiscountsInput
  wednesday: WednesdayCreateOneWithoutTimeDiscountsInput
  exhausted: Boolean
  tueExhaust: Boolean
  monExhaust: Boolean
  wedExhaust: Boolean
  thuExhaust: Boolean
  friExhaust: Boolean
  satExhaust: Boolean
  sunExhaust: Boolean
  monDiscount: Float
  tueDiscount: Float
  wedDiscount: Float
  thuDiscount: Float
  friDiscount: Float
  satDiscount: Float
  sunDiscount: Float
}

input TimeDiscountCreateWithoutOrdersesInput {
  discount: Float!
  id: ID
  restaurants: RestaurantsCreateOneWithoutTimeDiscountsInput
  time: String!
  daychange: Boolean
  day: Boolean
  newtime: String
  newdiscount: String
  friday: FridayCreateOneWithoutTimeDiscountsInput
  monday: MondayCreateOneWithoutTimeDiscountsInput
  saturday: SaturdayCreateOneWithoutTimeDiscountsInput
  sunday: SundayCreateOneWithoutTimeDiscountsInput
  thursday: ThursdayCreateOneWithoutTimeDiscountsInput
  tuesday: TuesdayCreateOneWithoutTimeDiscountsInput
  wednesday: WednesdayCreateOneWithoutTimeDiscountsInput
  exhausted: Boolean
  tueExhaust: Boolean
  monExhaust: Boolean
  wedExhaust: Boolean
  thuExhaust: Boolean
  friExhaust: Boolean
  satExhaust: Boolean
  sunExhaust: Boolean
  monDiscount: Float
  tueDiscount: Float
  wedDiscount: Float
  thuDiscount: Float
  friDiscount: Float
  satDiscount: Float
  sunDiscount: Float
}

input TimeDiscountCreateWithoutRestaurantsInput {
  discount: Float!
  id: ID
  orderses: OrdersCreateManyWithoutTimeDiscountInput
  time: String!
  daychange: Boolean
  day: Boolean
  newtime: String
  newdiscount: String
  friday: FridayCreateOneWithoutTimeDiscountsInput
  monday: MondayCreateOneWithoutTimeDiscountsInput
  saturday: SaturdayCreateOneWithoutTimeDiscountsInput
  sunday: SundayCreateOneWithoutTimeDiscountsInput
  thursday: ThursdayCreateOneWithoutTimeDiscountsInput
  tuesday: TuesdayCreateOneWithoutTimeDiscountsInput
  wednesday: WednesdayCreateOneWithoutTimeDiscountsInput
  exhausted: Boolean
  tueExhaust: Boolean
  monExhaust: Boolean
  wedExhaust: Boolean
  thuExhaust: Boolean
  friExhaust: Boolean
  satExhaust: Boolean
  sunExhaust: Boolean
  monDiscount: Float
  tueDiscount: Float
  wedDiscount: Float
  thuDiscount: Float
  friDiscount: Float
  satDiscount: Float
  sunDiscount: Float
}

input TimeDiscountCreateWithoutSaturdayInput {
  discount: Float!
  id: ID
  orderses: OrdersCreateManyWithoutTimeDiscountInput
  restaurants: RestaurantsCreateOneWithoutTimeDiscountsInput
  time: String!
  daychange: Boolean
  day: Boolean
  newtime: String
  newdiscount: String
  friday: FridayCreateOneWithoutTimeDiscountsInput
  monday: MondayCreateOneWithoutTimeDiscountsInput
  sunday: SundayCreateOneWithoutTimeDiscountsInput
  thursday: ThursdayCreateOneWithoutTimeDiscountsInput
  tuesday: TuesdayCreateOneWithoutTimeDiscountsInput
  wednesday: WednesdayCreateOneWithoutTimeDiscountsInput
  exhausted: Boolean
  tueExhaust: Boolean
  monExhaust: Boolean
  wedExhaust: Boolean
  thuExhaust: Boolean
  friExhaust: Boolean
  satExhaust: Boolean
  sunExhaust: Boolean
  monDiscount: Float
  tueDiscount: Float
  wedDiscount: Float
  thuDiscount: Float
  friDiscount: Float
  satDiscount: Float
  sunDiscount: Float
}

input TimeDiscountCreateWithoutSundayInput {
  discount: Float!
  id: ID
  orderses: OrdersCreateManyWithoutTimeDiscountInput
  restaurants: RestaurantsCreateOneWithoutTimeDiscountsInput
  time: String!
  daychange: Boolean
  day: Boolean
  newtime: String
  newdiscount: String
  friday: FridayCreateOneWithoutTimeDiscountsInput
  monday: MondayCreateOneWithoutTimeDiscountsInput
  saturday: SaturdayCreateOneWithoutTimeDiscountsInput
  thursday: ThursdayCreateOneWithoutTimeDiscountsInput
  tuesday: TuesdayCreateOneWithoutTimeDiscountsInput
  wednesday: WednesdayCreateOneWithoutTimeDiscountsInput
  exhausted: Boolean
  tueExhaust: Boolean
  monExhaust: Boolean
  wedExhaust: Boolean
  thuExhaust: Boolean
  friExhaust: Boolean
  satExhaust: Boolean
  sunExhaust: Boolean
  monDiscount: Float
  tueDiscount: Float
  wedDiscount: Float
  thuDiscount: Float
  friDiscount: Float
  satDiscount: Float
  sunDiscount: Float
}

input TimeDiscountCreateWithoutThursdayInput {
  discount: Float!
  id: ID
  orderses: OrdersCreateManyWithoutTimeDiscountInput
  restaurants: RestaurantsCreateOneWithoutTimeDiscountsInput
  time: String!
  daychange: Boolean
  day: Boolean
  newtime: String
  newdiscount: String
  friday: FridayCreateOneWithoutTimeDiscountsInput
  monday: MondayCreateOneWithoutTimeDiscountsInput
  saturday: SaturdayCreateOneWithoutTimeDiscountsInput
  sunday: SundayCreateOneWithoutTimeDiscountsInput
  tuesday: TuesdayCreateOneWithoutTimeDiscountsInput
  wednesday: WednesdayCreateOneWithoutTimeDiscountsInput
  exhausted: Boolean
  tueExhaust: Boolean
  monExhaust: Boolean
  wedExhaust: Boolean
  thuExhaust: Boolean
  friExhaust: Boolean
  satExhaust: Boolean
  sunExhaust: Boolean
  monDiscount: Float
  tueDiscount: Float
  wedDiscount: Float
  thuDiscount: Float
  friDiscount: Float
  satDiscount: Float
  sunDiscount: Float
}

input TimeDiscountCreateWithoutTuesdayInput {
  discount: Float!
  id: ID
  orderses: OrdersCreateManyWithoutTimeDiscountInput
  restaurants: RestaurantsCreateOneWithoutTimeDiscountsInput
  time: String!
  daychange: Boolean
  day: Boolean
  newtime: String
  newdiscount: String
  friday: FridayCreateOneWithoutTimeDiscountsInput
  monday: MondayCreateOneWithoutTimeDiscountsInput
  saturday: SaturdayCreateOneWithoutTimeDiscountsInput
  sunday: SundayCreateOneWithoutTimeDiscountsInput
  thursday: ThursdayCreateOneWithoutTimeDiscountsInput
  wednesday: WednesdayCreateOneWithoutTimeDiscountsInput
  exhausted: Boolean
  tueExhaust: Boolean
  monExhaust: Boolean
  wedExhaust: Boolean
  thuExhaust: Boolean
  friExhaust: Boolean
  satExhaust: Boolean
  sunExhaust: Boolean
  monDiscount: Float
  tueDiscount: Float
  wedDiscount: Float
  thuDiscount: Float
  friDiscount: Float
  satDiscount: Float
  sunDiscount: Float
}

input TimeDiscountCreateWithoutWednesdayInput {
  discount: Float!
  id: ID
  orderses: OrdersCreateManyWithoutTimeDiscountInput
  restaurants: RestaurantsCreateOneWithoutTimeDiscountsInput
  time: String!
  daychange: Boolean
  day: Boolean
  newtime: String
  newdiscount: String
  friday: FridayCreateOneWithoutTimeDiscountsInput
  monday: MondayCreateOneWithoutTimeDiscountsInput
  saturday: SaturdayCreateOneWithoutTimeDiscountsInput
  sunday: SundayCreateOneWithoutTimeDiscountsInput
  thursday: ThursdayCreateOneWithoutTimeDiscountsInput
  tuesday: TuesdayCreateOneWithoutTimeDiscountsInput
  exhausted: Boolean
  tueExhaust: Boolean
  monExhaust: Boolean
  wedExhaust: Boolean
  thuExhaust: Boolean
  friExhaust: Boolean
  satExhaust: Boolean
  sunExhaust: Boolean
  monDiscount: Float
  tueDiscount: Float
  wedDiscount: Float
  thuDiscount: Float
  friDiscount: Float
  satDiscount: Float
  sunDiscount: Float
}

type TimeDiscountEdge {
  node: TimeDiscount!
  cursor: String!
}

enum TimeDiscountOrderByInput {
  discount_ASC
  discount_DESC
  id_ASC
  id_DESC
  time_ASC
  time_DESC
  daychange_ASC
  daychange_DESC
  day_ASC
  day_DESC
  newtime_ASC
  newtime_DESC
  newdiscount_ASC
  newdiscount_DESC
  exhausted_ASC
  exhausted_DESC
  tueExhaust_ASC
  tueExhaust_DESC
  monExhaust_ASC
  monExhaust_DESC
  wedExhaust_ASC
  wedExhaust_DESC
  thuExhaust_ASC
  thuExhaust_DESC
  friExhaust_ASC
  friExhaust_DESC
  satExhaust_ASC
  satExhaust_DESC
  sunExhaust_ASC
  sunExhaust_DESC
  monDiscount_ASC
  monDiscount_DESC
  tueDiscount_ASC
  tueDiscount_DESC
  wedDiscount_ASC
  wedDiscount_DESC
  thuDiscount_ASC
  thuDiscount_DESC
  friDiscount_ASC
  friDiscount_DESC
  satDiscount_ASC
  satDiscount_DESC
  sunDiscount_ASC
  sunDiscount_DESC
}

type TimeDiscountPreviousValues {
  discount: Float!
  id: ID!
  time: String!
  daychange: Boolean
  day: Boolean
  newtime: String
  newdiscount: String
  exhausted: Boolean
  tueExhaust: Boolean!
  monExhaust: Boolean!
  wedExhaust: Boolean!
  thuExhaust: Boolean!
  friExhaust: Boolean!
  satExhaust: Boolean!
  sunExhaust: Boolean!
  monDiscount: Float!
  tueDiscount: Float!
  wedDiscount: Float!
  thuDiscount: Float!
  friDiscount: Float!
  satDiscount: Float!
  sunDiscount: Float!
}

input TimeDiscountScalarWhereInput {
  discount: Float
  discount_not: Float
  discount_in: [Float!]
  discount_not_in: [Float!]
  discount_lt: Float
  discount_lte: Float
  discount_gt: Float
  discount_gte: Float
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  time: String
  time_not: String
  time_in: [String!]
  time_not_in: [String!]
  time_lt: String
  time_lte: String
  time_gt: String
  time_gte: String
  time_contains: String
  time_not_contains: String
  time_starts_with: String
  time_not_starts_with: String
  time_ends_with: String
  time_not_ends_with: String
  daychange: Boolean
  daychange_not: Boolean
  day: Boolean
  day_not: Boolean
  newtime: String
  newtime_not: String
  newtime_in: [String!]
  newtime_not_in: [String!]
  newtime_lt: String
  newtime_lte: String
  newtime_gt: String
  newtime_gte: String
  newtime_contains: String
  newtime_not_contains: String
  newtime_starts_with: String
  newtime_not_starts_with: String
  newtime_ends_with: String
  newtime_not_ends_with: String
  newdiscount: String
  newdiscount_not: String
  newdiscount_in: [String!]
  newdiscount_not_in: [String!]
  newdiscount_lt: String
  newdiscount_lte: String
  newdiscount_gt: String
  newdiscount_gte: String
  newdiscount_contains: String
  newdiscount_not_contains: String
  newdiscount_starts_with: String
  newdiscount_not_starts_with: String
  newdiscount_ends_with: String
  newdiscount_not_ends_with: String
  exhausted: Boolean
  exhausted_not: Boolean
  tueExhaust: Boolean
  tueExhaust_not: Boolean
  monExhaust: Boolean
  monExhaust_not: Boolean
  wedExhaust: Boolean
  wedExhaust_not: Boolean
  thuExhaust: Boolean
  thuExhaust_not: Boolean
  friExhaust: Boolean
  friExhaust_not: Boolean
  satExhaust: Boolean
  satExhaust_not: Boolean
  sunExhaust: Boolean
  sunExhaust_not: Boolean
  monDiscount: Float
  monDiscount_not: Float
  monDiscount_in: [Float!]
  monDiscount_not_in: [Float!]
  monDiscount_lt: Float
  monDiscount_lte: Float
  monDiscount_gt: Float
  monDiscount_gte: Float
  tueDiscount: Float
  tueDiscount_not: Float
  tueDiscount_in: [Float!]
  tueDiscount_not_in: [Float!]
  tueDiscount_lt: Float
  tueDiscount_lte: Float
  tueDiscount_gt: Float
  tueDiscount_gte: Float
  wedDiscount: Float
  wedDiscount_not: Float
  wedDiscount_in: [Float!]
  wedDiscount_not_in: [Float!]
  wedDiscount_lt: Float
  wedDiscount_lte: Float
  wedDiscount_gt: Float
  wedDiscount_gte: Float
  thuDiscount: Float
  thuDiscount_not: Float
  thuDiscount_in: [Float!]
  thuDiscount_not_in: [Float!]
  thuDiscount_lt: Float
  thuDiscount_lte: Float
  thuDiscount_gt: Float
  thuDiscount_gte: Float
  friDiscount: Float
  friDiscount_not: Float
  friDiscount_in: [Float!]
  friDiscount_not_in: [Float!]
  friDiscount_lt: Float
  friDiscount_lte: Float
  friDiscount_gt: Float
  friDiscount_gte: Float
  satDiscount: Float
  satDiscount_not: Float
  satDiscount_in: [Float!]
  satDiscount_not_in: [Float!]
  satDiscount_lt: Float
  satDiscount_lte: Float
  satDiscount_gt: Float
  satDiscount_gte: Float
  sunDiscount: Float
  sunDiscount_not: Float
  sunDiscount_in: [Float!]
  sunDiscount_not_in: [Float!]
  sunDiscount_lt: Float
  sunDiscount_lte: Float
  sunDiscount_gt: Float
  sunDiscount_gte: Float
  AND: [TimeDiscountScalarWhereInput!]
  OR: [TimeDiscountScalarWhereInput!]
  NOT: [TimeDiscountScalarWhereInput!]
}

type TimeDiscountSubscriptionPayload {
  mutation: MutationType!
  node: TimeDiscount
  updatedFields: [String!]
  previousValues: TimeDiscountPreviousValues
}

input TimeDiscountSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TimeDiscountWhereInput
  AND: [TimeDiscountSubscriptionWhereInput!]
  OR: [TimeDiscountSubscriptionWhereInput!]
  NOT: [TimeDiscountSubscriptionWhereInput!]
}

input TimeDiscountUpdateInput {
  discount: Float
  orderses: OrdersUpdateManyWithoutTimeDiscountInput
  restaurants: RestaurantsUpdateOneWithoutTimeDiscountsInput
  time: String
  daychange: Boolean
  day: Boolean
  newtime: String
  newdiscount: String
  friday: FridayUpdateOneWithoutTimeDiscountsInput
  monday: MondayUpdateOneWithoutTimeDiscountsInput
  saturday: SaturdayUpdateOneWithoutTimeDiscountsInput
  sunday: SundayUpdateOneWithoutTimeDiscountsInput
  thursday: ThursdayUpdateOneWithoutTimeDiscountsInput
  tuesday: TuesdayUpdateOneWithoutTimeDiscountsInput
  wednesday: WednesdayUpdateOneWithoutTimeDiscountsInput
  exhausted: Boolean
  tueExhaust: Boolean
  monExhaust: Boolean
  wedExhaust: Boolean
  thuExhaust: Boolean
  friExhaust: Boolean
  satExhaust: Boolean
  sunExhaust: Boolean
  monDiscount: Float
  tueDiscount: Float
  wedDiscount: Float
  thuDiscount: Float
  friDiscount: Float
  satDiscount: Float
  sunDiscount: Float
}

input TimeDiscountUpdateManyDataInput {
  discount: Float
  time: String
  daychange: Boolean
  day: Boolean
  newtime: String
  newdiscount: String
  exhausted: Boolean
  tueExhaust: Boolean
  monExhaust: Boolean
  wedExhaust: Boolean
  thuExhaust: Boolean
  friExhaust: Boolean
  satExhaust: Boolean
  sunExhaust: Boolean
  monDiscount: Float
  tueDiscount: Float
  wedDiscount: Float
  thuDiscount: Float
  friDiscount: Float
  satDiscount: Float
  sunDiscount: Float
}

input TimeDiscountUpdateManyMutationInput {
  discount: Float
  time: String
  daychange: Boolean
  day: Boolean
  newtime: String
  newdiscount: String
  exhausted: Boolean
  tueExhaust: Boolean
  monExhaust: Boolean
  wedExhaust: Boolean
  thuExhaust: Boolean
  friExhaust: Boolean
  satExhaust: Boolean
  sunExhaust: Boolean
  monDiscount: Float
  tueDiscount: Float
  wedDiscount: Float
  thuDiscount: Float
  friDiscount: Float
  satDiscount: Float
  sunDiscount: Float
}

input TimeDiscountUpdateManyWithoutFridayInput {
  create: [TimeDiscountCreateWithoutFridayInput!]
  delete: [TimeDiscountWhereUniqueInput!]
  connect: [TimeDiscountWhereUniqueInput!]
  set: [TimeDiscountWhereUniqueInput!]
  disconnect: [TimeDiscountWhereUniqueInput!]
  update: [TimeDiscountUpdateWithWhereUniqueWithoutFridayInput!]
  upsert: [TimeDiscountUpsertWithWhereUniqueWithoutFridayInput!]
  deleteMany: [TimeDiscountScalarWhereInput!]
  updateMany: [TimeDiscountUpdateManyWithWhereNestedInput!]
}

input TimeDiscountUpdateManyWithoutMondayInput {
  create: [TimeDiscountCreateWithoutMondayInput!]
  delete: [TimeDiscountWhereUniqueInput!]
  connect: [TimeDiscountWhereUniqueInput!]
  set: [TimeDiscountWhereUniqueInput!]
  disconnect: [TimeDiscountWhereUniqueInput!]
  update: [TimeDiscountUpdateWithWhereUniqueWithoutMondayInput!]
  upsert: [TimeDiscountUpsertWithWhereUniqueWithoutMondayInput!]
  deleteMany: [TimeDiscountScalarWhereInput!]
  updateMany: [TimeDiscountUpdateManyWithWhereNestedInput!]
}

input TimeDiscountUpdateManyWithoutRestaurantsInput {
  create: [TimeDiscountCreateWithoutRestaurantsInput!]
  delete: [TimeDiscountWhereUniqueInput!]
  connect: [TimeDiscountWhereUniqueInput!]
  set: [TimeDiscountWhereUniqueInput!]
  disconnect: [TimeDiscountWhereUniqueInput!]
  update: [TimeDiscountUpdateWithWhereUniqueWithoutRestaurantsInput!]
  upsert: [TimeDiscountUpsertWithWhereUniqueWithoutRestaurantsInput!]
  deleteMany: [TimeDiscountScalarWhereInput!]
  updateMany: [TimeDiscountUpdateManyWithWhereNestedInput!]
}

input TimeDiscountUpdateManyWithoutSaturdayInput {
  create: [TimeDiscountCreateWithoutSaturdayInput!]
  delete: [TimeDiscountWhereUniqueInput!]
  connect: [TimeDiscountWhereUniqueInput!]
  set: [TimeDiscountWhereUniqueInput!]
  disconnect: [TimeDiscountWhereUniqueInput!]
  update: [TimeDiscountUpdateWithWhereUniqueWithoutSaturdayInput!]
  upsert: [TimeDiscountUpsertWithWhereUniqueWithoutSaturdayInput!]
  deleteMany: [TimeDiscountScalarWhereInput!]
  updateMany: [TimeDiscountUpdateManyWithWhereNestedInput!]
}

input TimeDiscountUpdateManyWithoutSundayInput {
  create: [TimeDiscountCreateWithoutSundayInput!]
  delete: [TimeDiscountWhereUniqueInput!]
  connect: [TimeDiscountWhereUniqueInput!]
  set: [TimeDiscountWhereUniqueInput!]
  disconnect: [TimeDiscountWhereUniqueInput!]
  update: [TimeDiscountUpdateWithWhereUniqueWithoutSundayInput!]
  upsert: [TimeDiscountUpsertWithWhereUniqueWithoutSundayInput!]
  deleteMany: [TimeDiscountScalarWhereInput!]
  updateMany: [TimeDiscountUpdateManyWithWhereNestedInput!]
}

input TimeDiscountUpdateManyWithoutThursdayInput {
  create: [TimeDiscountCreateWithoutThursdayInput!]
  delete: [TimeDiscountWhereUniqueInput!]
  connect: [TimeDiscountWhereUniqueInput!]
  set: [TimeDiscountWhereUniqueInput!]
  disconnect: [TimeDiscountWhereUniqueInput!]
  update: [TimeDiscountUpdateWithWhereUniqueWithoutThursdayInput!]
  upsert: [TimeDiscountUpsertWithWhereUniqueWithoutThursdayInput!]
  deleteMany: [TimeDiscountScalarWhereInput!]
  updateMany: [TimeDiscountUpdateManyWithWhereNestedInput!]
}

input TimeDiscountUpdateManyWithoutTuesdayInput {
  create: [TimeDiscountCreateWithoutTuesdayInput!]
  delete: [TimeDiscountWhereUniqueInput!]
  connect: [TimeDiscountWhereUniqueInput!]
  set: [TimeDiscountWhereUniqueInput!]
  disconnect: [TimeDiscountWhereUniqueInput!]
  update: [TimeDiscountUpdateWithWhereUniqueWithoutTuesdayInput!]
  upsert: [TimeDiscountUpsertWithWhereUniqueWithoutTuesdayInput!]
  deleteMany: [TimeDiscountScalarWhereInput!]
  updateMany: [TimeDiscountUpdateManyWithWhereNestedInput!]
}

input TimeDiscountUpdateManyWithoutWednesdayInput {
  create: [TimeDiscountCreateWithoutWednesdayInput!]
  delete: [TimeDiscountWhereUniqueInput!]
  connect: [TimeDiscountWhereUniqueInput!]
  set: [TimeDiscountWhereUniqueInput!]
  disconnect: [TimeDiscountWhereUniqueInput!]
  update: [TimeDiscountUpdateWithWhereUniqueWithoutWednesdayInput!]
  upsert: [TimeDiscountUpsertWithWhereUniqueWithoutWednesdayInput!]
  deleteMany: [TimeDiscountScalarWhereInput!]
  updateMany: [TimeDiscountUpdateManyWithWhereNestedInput!]
}

input TimeDiscountUpdateManyWithWhereNestedInput {
  where: TimeDiscountScalarWhereInput!
  data: TimeDiscountUpdateManyDataInput!
}

input TimeDiscountUpdateOneWithoutOrdersesInput {
  create: TimeDiscountCreateWithoutOrdersesInput
  update: TimeDiscountUpdateWithoutOrdersesDataInput
  upsert: TimeDiscountUpsertWithoutOrdersesInput
  delete: Boolean
  disconnect: Boolean
  connect: TimeDiscountWhereUniqueInput
}

input TimeDiscountUpdateWithoutFridayDataInput {
  discount: Float
  orderses: OrdersUpdateManyWithoutTimeDiscountInput
  restaurants: RestaurantsUpdateOneWithoutTimeDiscountsInput
  time: String
  daychange: Boolean
  day: Boolean
  newtime: String
  newdiscount: String
  monday: MondayUpdateOneWithoutTimeDiscountsInput
  saturday: SaturdayUpdateOneWithoutTimeDiscountsInput
  sunday: SundayUpdateOneWithoutTimeDiscountsInput
  thursday: ThursdayUpdateOneWithoutTimeDiscountsInput
  tuesday: TuesdayUpdateOneWithoutTimeDiscountsInput
  wednesday: WednesdayUpdateOneWithoutTimeDiscountsInput
  exhausted: Boolean
  tueExhaust: Boolean
  monExhaust: Boolean
  wedExhaust: Boolean
  thuExhaust: Boolean
  friExhaust: Boolean
  satExhaust: Boolean
  sunExhaust: Boolean
  monDiscount: Float
  tueDiscount: Float
  wedDiscount: Float
  thuDiscount: Float
  friDiscount: Float
  satDiscount: Float
  sunDiscount: Float
}

input TimeDiscountUpdateWithoutMondayDataInput {
  discount: Float
  orderses: OrdersUpdateManyWithoutTimeDiscountInput
  restaurants: RestaurantsUpdateOneWithoutTimeDiscountsInput
  time: String
  daychange: Boolean
  day: Boolean
  newtime: String
  newdiscount: String
  friday: FridayUpdateOneWithoutTimeDiscountsInput
  saturday: SaturdayUpdateOneWithoutTimeDiscountsInput
  sunday: SundayUpdateOneWithoutTimeDiscountsInput
  thursday: ThursdayUpdateOneWithoutTimeDiscountsInput
  tuesday: TuesdayUpdateOneWithoutTimeDiscountsInput
  wednesday: WednesdayUpdateOneWithoutTimeDiscountsInput
  exhausted: Boolean
  tueExhaust: Boolean
  monExhaust: Boolean
  wedExhaust: Boolean
  thuExhaust: Boolean
  friExhaust: Boolean
  satExhaust: Boolean
  sunExhaust: Boolean
  monDiscount: Float
  tueDiscount: Float
  wedDiscount: Float
  thuDiscount: Float
  friDiscount: Float
  satDiscount: Float
  sunDiscount: Float
}

input TimeDiscountUpdateWithoutOrdersesDataInput {
  discount: Float
  restaurants: RestaurantsUpdateOneWithoutTimeDiscountsInput
  time: String
  daychange: Boolean
  day: Boolean
  newtime: String
  newdiscount: String
  friday: FridayUpdateOneWithoutTimeDiscountsInput
  monday: MondayUpdateOneWithoutTimeDiscountsInput
  saturday: SaturdayUpdateOneWithoutTimeDiscountsInput
  sunday: SundayUpdateOneWithoutTimeDiscountsInput
  thursday: ThursdayUpdateOneWithoutTimeDiscountsInput
  tuesday: TuesdayUpdateOneWithoutTimeDiscountsInput
  wednesday: WednesdayUpdateOneWithoutTimeDiscountsInput
  exhausted: Boolean
  tueExhaust: Boolean
  monExhaust: Boolean
  wedExhaust: Boolean
  thuExhaust: Boolean
  friExhaust: Boolean
  satExhaust: Boolean
  sunExhaust: Boolean
  monDiscount: Float
  tueDiscount: Float
  wedDiscount: Float
  thuDiscount: Float
  friDiscount: Float
  satDiscount: Float
  sunDiscount: Float
}

input TimeDiscountUpdateWithoutRestaurantsDataInput {
  discount: Float
  orderses: OrdersUpdateManyWithoutTimeDiscountInput
  time: String
  daychange: Boolean
  day: Boolean
  newtime: String
  newdiscount: String
  friday: FridayUpdateOneWithoutTimeDiscountsInput
  monday: MondayUpdateOneWithoutTimeDiscountsInput
  saturday: SaturdayUpdateOneWithoutTimeDiscountsInput
  sunday: SundayUpdateOneWithoutTimeDiscountsInput
  thursday: ThursdayUpdateOneWithoutTimeDiscountsInput
  tuesday: TuesdayUpdateOneWithoutTimeDiscountsInput
  wednesday: WednesdayUpdateOneWithoutTimeDiscountsInput
  exhausted: Boolean
  tueExhaust: Boolean
  monExhaust: Boolean
  wedExhaust: Boolean
  thuExhaust: Boolean
  friExhaust: Boolean
  satExhaust: Boolean
  sunExhaust: Boolean
  monDiscount: Float
  tueDiscount: Float
  wedDiscount: Float
  thuDiscount: Float
  friDiscount: Float
  satDiscount: Float
  sunDiscount: Float
}

input TimeDiscountUpdateWithoutSaturdayDataInput {
  discount: Float
  orderses: OrdersUpdateManyWithoutTimeDiscountInput
  restaurants: RestaurantsUpdateOneWithoutTimeDiscountsInput
  time: String
  daychange: Boolean
  day: Boolean
  newtime: String
  newdiscount: String
  friday: FridayUpdateOneWithoutTimeDiscountsInput
  monday: MondayUpdateOneWithoutTimeDiscountsInput
  sunday: SundayUpdateOneWithoutTimeDiscountsInput
  thursday: ThursdayUpdateOneWithoutTimeDiscountsInput
  tuesday: TuesdayUpdateOneWithoutTimeDiscountsInput
  wednesday: WednesdayUpdateOneWithoutTimeDiscountsInput
  exhausted: Boolean
  tueExhaust: Boolean
  monExhaust: Boolean
  wedExhaust: Boolean
  thuExhaust: Boolean
  friExhaust: Boolean
  satExhaust: Boolean
  sunExhaust: Boolean
  monDiscount: Float
  tueDiscount: Float
  wedDiscount: Float
  thuDiscount: Float
  friDiscount: Float
  satDiscount: Float
  sunDiscount: Float
}

input TimeDiscountUpdateWithoutSundayDataInput {
  discount: Float
  orderses: OrdersUpdateManyWithoutTimeDiscountInput
  restaurants: RestaurantsUpdateOneWithoutTimeDiscountsInput
  time: String
  daychange: Boolean
  day: Boolean
  newtime: String
  newdiscount: String
  friday: FridayUpdateOneWithoutTimeDiscountsInput
  monday: MondayUpdateOneWithoutTimeDiscountsInput
  saturday: SaturdayUpdateOneWithoutTimeDiscountsInput
  thursday: ThursdayUpdateOneWithoutTimeDiscountsInput
  tuesday: TuesdayUpdateOneWithoutTimeDiscountsInput
  wednesday: WednesdayUpdateOneWithoutTimeDiscountsInput
  exhausted: Boolean
  tueExhaust: Boolean
  monExhaust: Boolean
  wedExhaust: Boolean
  thuExhaust: Boolean
  friExhaust: Boolean
  satExhaust: Boolean
  sunExhaust: Boolean
  monDiscount: Float
  tueDiscount: Float
  wedDiscount: Float
  thuDiscount: Float
  friDiscount: Float
  satDiscount: Float
  sunDiscount: Float
}

input TimeDiscountUpdateWithoutThursdayDataInput {
  discount: Float
  orderses: OrdersUpdateManyWithoutTimeDiscountInput
  restaurants: RestaurantsUpdateOneWithoutTimeDiscountsInput
  time: String
  daychange: Boolean
  day: Boolean
  newtime: String
  newdiscount: String
  friday: FridayUpdateOneWithoutTimeDiscountsInput
  monday: MondayUpdateOneWithoutTimeDiscountsInput
  saturday: SaturdayUpdateOneWithoutTimeDiscountsInput
  sunday: SundayUpdateOneWithoutTimeDiscountsInput
  tuesday: TuesdayUpdateOneWithoutTimeDiscountsInput
  wednesday: WednesdayUpdateOneWithoutTimeDiscountsInput
  exhausted: Boolean
  tueExhaust: Boolean
  monExhaust: Boolean
  wedExhaust: Boolean
  thuExhaust: Boolean
  friExhaust: Boolean
  satExhaust: Boolean
  sunExhaust: Boolean
  monDiscount: Float
  tueDiscount: Float
  wedDiscount: Float
  thuDiscount: Float
  friDiscount: Float
  satDiscount: Float
  sunDiscount: Float
}

input TimeDiscountUpdateWithoutTuesdayDataInput {
  discount: Float
  orderses: OrdersUpdateManyWithoutTimeDiscountInput
  restaurants: RestaurantsUpdateOneWithoutTimeDiscountsInput
  time: String
  daychange: Boolean
  day: Boolean
  newtime: String
  newdiscount: String
  friday: FridayUpdateOneWithoutTimeDiscountsInput
  monday: MondayUpdateOneWithoutTimeDiscountsInput
  saturday: SaturdayUpdateOneWithoutTimeDiscountsInput
  sunday: SundayUpdateOneWithoutTimeDiscountsInput
  thursday: ThursdayUpdateOneWithoutTimeDiscountsInput
  wednesday: WednesdayUpdateOneWithoutTimeDiscountsInput
  exhausted: Boolean
  tueExhaust: Boolean
  monExhaust: Boolean
  wedExhaust: Boolean
  thuExhaust: Boolean
  friExhaust: Boolean
  satExhaust: Boolean
  sunExhaust: Boolean
  monDiscount: Float
  tueDiscount: Float
  wedDiscount: Float
  thuDiscount: Float
  friDiscount: Float
  satDiscount: Float
  sunDiscount: Float
}

input TimeDiscountUpdateWithoutWednesdayDataInput {
  discount: Float
  orderses: OrdersUpdateManyWithoutTimeDiscountInput
  restaurants: RestaurantsUpdateOneWithoutTimeDiscountsInput
  time: String
  daychange: Boolean
  day: Boolean
  newtime: String
  newdiscount: String
  friday: FridayUpdateOneWithoutTimeDiscountsInput
  monday: MondayUpdateOneWithoutTimeDiscountsInput
  saturday: SaturdayUpdateOneWithoutTimeDiscountsInput
  sunday: SundayUpdateOneWithoutTimeDiscountsInput
  thursday: ThursdayUpdateOneWithoutTimeDiscountsInput
  tuesday: TuesdayUpdateOneWithoutTimeDiscountsInput
  exhausted: Boolean
  tueExhaust: Boolean
  monExhaust: Boolean
  wedExhaust: Boolean
  thuExhaust: Boolean
  friExhaust: Boolean
  satExhaust: Boolean
  sunExhaust: Boolean
  monDiscount: Float
  tueDiscount: Float
  wedDiscount: Float
  thuDiscount: Float
  friDiscount: Float
  satDiscount: Float
  sunDiscount: Float
}

input TimeDiscountUpdateWithWhereUniqueWithoutFridayInput {
  where: TimeDiscountWhereUniqueInput!
  data: TimeDiscountUpdateWithoutFridayDataInput!
}

input TimeDiscountUpdateWithWhereUniqueWithoutMondayInput {
  where: TimeDiscountWhereUniqueInput!
  data: TimeDiscountUpdateWithoutMondayDataInput!
}

input TimeDiscountUpdateWithWhereUniqueWithoutRestaurantsInput {
  where: TimeDiscountWhereUniqueInput!
  data: TimeDiscountUpdateWithoutRestaurantsDataInput!
}

input TimeDiscountUpdateWithWhereUniqueWithoutSaturdayInput {
  where: TimeDiscountWhereUniqueInput!
  data: TimeDiscountUpdateWithoutSaturdayDataInput!
}

input TimeDiscountUpdateWithWhereUniqueWithoutSundayInput {
  where: TimeDiscountWhereUniqueInput!
  data: TimeDiscountUpdateWithoutSundayDataInput!
}

input TimeDiscountUpdateWithWhereUniqueWithoutThursdayInput {
  where: TimeDiscountWhereUniqueInput!
  data: TimeDiscountUpdateWithoutThursdayDataInput!
}

input TimeDiscountUpdateWithWhereUniqueWithoutTuesdayInput {
  where: TimeDiscountWhereUniqueInput!
  data: TimeDiscountUpdateWithoutTuesdayDataInput!
}

input TimeDiscountUpdateWithWhereUniqueWithoutWednesdayInput {
  where: TimeDiscountWhereUniqueInput!
  data: TimeDiscountUpdateWithoutWednesdayDataInput!
}

input TimeDiscountUpsertWithoutOrdersesInput {
  update: TimeDiscountUpdateWithoutOrdersesDataInput!
  create: TimeDiscountCreateWithoutOrdersesInput!
}

input TimeDiscountUpsertWithWhereUniqueWithoutFridayInput {
  where: TimeDiscountWhereUniqueInput!
  update: TimeDiscountUpdateWithoutFridayDataInput!
  create: TimeDiscountCreateWithoutFridayInput!
}

input TimeDiscountUpsertWithWhereUniqueWithoutMondayInput {
  where: TimeDiscountWhereUniqueInput!
  update: TimeDiscountUpdateWithoutMondayDataInput!
  create: TimeDiscountCreateWithoutMondayInput!
}

input TimeDiscountUpsertWithWhereUniqueWithoutRestaurantsInput {
  where: TimeDiscountWhereUniqueInput!
  update: TimeDiscountUpdateWithoutRestaurantsDataInput!
  create: TimeDiscountCreateWithoutRestaurantsInput!
}

input TimeDiscountUpsertWithWhereUniqueWithoutSaturdayInput {
  where: TimeDiscountWhereUniqueInput!
  update: TimeDiscountUpdateWithoutSaturdayDataInput!
  create: TimeDiscountCreateWithoutSaturdayInput!
}

input TimeDiscountUpsertWithWhereUniqueWithoutSundayInput {
  where: TimeDiscountWhereUniqueInput!
  update: TimeDiscountUpdateWithoutSundayDataInput!
  create: TimeDiscountCreateWithoutSundayInput!
}

input TimeDiscountUpsertWithWhereUniqueWithoutThursdayInput {
  where: TimeDiscountWhereUniqueInput!
  update: TimeDiscountUpdateWithoutThursdayDataInput!
  create: TimeDiscountCreateWithoutThursdayInput!
}

input TimeDiscountUpsertWithWhereUniqueWithoutTuesdayInput {
  where: TimeDiscountWhereUniqueInput!
  update: TimeDiscountUpdateWithoutTuesdayDataInput!
  create: TimeDiscountCreateWithoutTuesdayInput!
}

input TimeDiscountUpsertWithWhereUniqueWithoutWednesdayInput {
  where: TimeDiscountWhereUniqueInput!
  update: TimeDiscountUpdateWithoutWednesdayDataInput!
  create: TimeDiscountCreateWithoutWednesdayInput!
}

input TimeDiscountWhereInput {
  discount: Float
  discount_not: Float
  discount_in: [Float!]
  discount_not_in: [Float!]
  discount_lt: Float
  discount_lte: Float
  discount_gt: Float
  discount_gte: Float
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  orderses_every: OrdersWhereInput
  orderses_some: OrdersWhereInput
  orderses_none: OrdersWhereInput
  restaurants: RestaurantsWhereInput
  time: String
  time_not: String
  time_in: [String!]
  time_not_in: [String!]
  time_lt: String
  time_lte: String
  time_gt: String
  time_gte: String
  time_contains: String
  time_not_contains: String
  time_starts_with: String
  time_not_starts_with: String
  time_ends_with: String
  time_not_ends_with: String
  daychange: Boolean
  daychange_not: Boolean
  day: Boolean
  day_not: Boolean
  newtime: String
  newtime_not: String
  newtime_in: [String!]
  newtime_not_in: [String!]
  newtime_lt: String
  newtime_lte: String
  newtime_gt: String
  newtime_gte: String
  newtime_contains: String
  newtime_not_contains: String
  newtime_starts_with: String
  newtime_not_starts_with: String
  newtime_ends_with: String
  newtime_not_ends_with: String
  newdiscount: String
  newdiscount_not: String
  newdiscount_in: [String!]
  newdiscount_not_in: [String!]
  newdiscount_lt: String
  newdiscount_lte: String
  newdiscount_gt: String
  newdiscount_gte: String
  newdiscount_contains: String
  newdiscount_not_contains: String
  newdiscount_starts_with: String
  newdiscount_not_starts_with: String
  newdiscount_ends_with: String
  newdiscount_not_ends_with: String
  friday: FridayWhereInput
  monday: MondayWhereInput
  saturday: SaturdayWhereInput
  sunday: SundayWhereInput
  thursday: ThursdayWhereInput
  tuesday: TuesdayWhereInput
  wednesday: WednesdayWhereInput
  exhausted: Boolean
  exhausted_not: Boolean
  tueExhaust: Boolean
  tueExhaust_not: Boolean
  monExhaust: Boolean
  monExhaust_not: Boolean
  wedExhaust: Boolean
  wedExhaust_not: Boolean
  thuExhaust: Boolean
  thuExhaust_not: Boolean
  friExhaust: Boolean
  friExhaust_not: Boolean
  satExhaust: Boolean
  satExhaust_not: Boolean
  sunExhaust: Boolean
  sunExhaust_not: Boolean
  monDiscount: Float
  monDiscount_not: Float
  monDiscount_in: [Float!]
  monDiscount_not_in: [Float!]
  monDiscount_lt: Float
  monDiscount_lte: Float
  monDiscount_gt: Float
  monDiscount_gte: Float
  tueDiscount: Float
  tueDiscount_not: Float
  tueDiscount_in: [Float!]
  tueDiscount_not_in: [Float!]
  tueDiscount_lt: Float
  tueDiscount_lte: Float
  tueDiscount_gt: Float
  tueDiscount_gte: Float
  wedDiscount: Float
  wedDiscount_not: Float
  wedDiscount_in: [Float!]
  wedDiscount_not_in: [Float!]
  wedDiscount_lt: Float
  wedDiscount_lte: Float
  wedDiscount_gt: Float
  wedDiscount_gte: Float
  thuDiscount: Float
  thuDiscount_not: Float
  thuDiscount_in: [Float!]
  thuDiscount_not_in: [Float!]
  thuDiscount_lt: Float
  thuDiscount_lte: Float
  thuDiscount_gt: Float
  thuDiscount_gte: Float
  friDiscount: Float
  friDiscount_not: Float
  friDiscount_in: [Float!]
  friDiscount_not_in: [Float!]
  friDiscount_lt: Float
  friDiscount_lte: Float
  friDiscount_gt: Float
  friDiscount_gte: Float
  satDiscount: Float
  satDiscount_not: Float
  satDiscount_in: [Float!]
  satDiscount_not_in: [Float!]
  satDiscount_lt: Float
  satDiscount_lte: Float
  satDiscount_gt: Float
  satDiscount_gte: Float
  sunDiscount: Float
  sunDiscount_not: Float
  sunDiscount_in: [Float!]
  sunDiscount_not_in: [Float!]
  sunDiscount_lt: Float
  sunDiscount_lte: Float
  sunDiscount_gt: Float
  sunDiscount_gte: Float
  AND: [TimeDiscountWhereInput!]
  OR: [TimeDiscountWhereInput!]
  NOT: [TimeDiscountWhereInput!]
}

input TimeDiscountWhereUniqueInput {
  id: ID
}

type Tuesday {
  exhausted: Boolean!
  id: ID!
  restaurants: Restaurants
  timeDiscounts(where: TimeDiscountWhereInput, orderBy: TimeDiscountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeDiscount!]
  order: Int
}

type TuesdayConnection {
  pageInfo: PageInfo!
  edges: [TuesdayEdge]!
  aggregate: AggregateTuesday!
}

input TuesdayCreateInput {
  exhausted: Boolean
  id: ID
  restaurants: RestaurantsCreateOneWithoutTuesdayInput
  timeDiscounts: TimeDiscountCreateManyWithoutTuesdayInput
  order: Int
}

input TuesdayCreateOneWithoutRestaurantsInput {
  create: TuesdayCreateWithoutRestaurantsInput
  connect: TuesdayWhereUniqueInput
}

input TuesdayCreateOneWithoutTimeDiscountsInput {
  create: TuesdayCreateWithoutTimeDiscountsInput
  connect: TuesdayWhereUniqueInput
}

input TuesdayCreateWithoutRestaurantsInput {
  exhausted: Boolean
  id: ID
  timeDiscounts: TimeDiscountCreateManyWithoutTuesdayInput
  order: Int
}

input TuesdayCreateWithoutTimeDiscountsInput {
  exhausted: Boolean
  id: ID
  restaurants: RestaurantsCreateOneWithoutTuesdayInput
  order: Int
}

type TuesdayEdge {
  node: Tuesday!
  cursor: String!
}

enum TuesdayOrderByInput {
  exhausted_ASC
  exhausted_DESC
  id_ASC
  id_DESC
  order_ASC
  order_DESC
}

type TuesdayPreviousValues {
  exhausted: Boolean!
  id: ID!
  order: Int
}

type TuesdaySubscriptionPayload {
  mutation: MutationType!
  node: Tuesday
  updatedFields: [String!]
  previousValues: TuesdayPreviousValues
}

input TuesdaySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TuesdayWhereInput
  AND: [TuesdaySubscriptionWhereInput!]
  OR: [TuesdaySubscriptionWhereInput!]
  NOT: [TuesdaySubscriptionWhereInput!]
}

input TuesdayUpdateInput {
  exhausted: Boolean
  restaurants: RestaurantsUpdateOneWithoutTuesdayInput
  timeDiscounts: TimeDiscountUpdateManyWithoutTuesdayInput
  order: Int
}

input TuesdayUpdateManyMutationInput {
  exhausted: Boolean
  order: Int
}

input TuesdayUpdateOneWithoutRestaurantsInput {
  create: TuesdayCreateWithoutRestaurantsInput
  update: TuesdayUpdateWithoutRestaurantsDataInput
  upsert: TuesdayUpsertWithoutRestaurantsInput
  delete: Boolean
  disconnect: Boolean
  connect: TuesdayWhereUniqueInput
}

input TuesdayUpdateOneWithoutTimeDiscountsInput {
  create: TuesdayCreateWithoutTimeDiscountsInput
  update: TuesdayUpdateWithoutTimeDiscountsDataInput
  upsert: TuesdayUpsertWithoutTimeDiscountsInput
  delete: Boolean
  disconnect: Boolean
  connect: TuesdayWhereUniqueInput
}

input TuesdayUpdateWithoutRestaurantsDataInput {
  exhausted: Boolean
  timeDiscounts: TimeDiscountUpdateManyWithoutTuesdayInput
  order: Int
}

input TuesdayUpdateWithoutTimeDiscountsDataInput {
  exhausted: Boolean
  restaurants: RestaurantsUpdateOneWithoutTuesdayInput
  order: Int
}

input TuesdayUpsertWithoutRestaurantsInput {
  update: TuesdayUpdateWithoutRestaurantsDataInput!
  create: TuesdayCreateWithoutRestaurantsInput!
}

input TuesdayUpsertWithoutTimeDiscountsInput {
  update: TuesdayUpdateWithoutTimeDiscountsDataInput!
  create: TuesdayCreateWithoutTimeDiscountsInput!
}

input TuesdayWhereInput {
  exhausted: Boolean
  exhausted_not: Boolean
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  restaurants: RestaurantsWhereInput
  timeDiscounts_every: TimeDiscountWhereInput
  timeDiscounts_some: TimeDiscountWhereInput
  timeDiscounts_none: TimeDiscountWhereInput
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  AND: [TuesdayWhereInput!]
  OR: [TuesdayWhereInput!]
  NOT: [TuesdayWhereInput!]
}

input TuesdayWhereUniqueInput {
  id: ID
}

type User {
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String
  firstname: String
  id: ID!
  facebookID: String!
  lastname: String
  mobile: String
  totalOrders: Int
  orderses(where: OrdersWhereInput, orderBy: OrdersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Orders!]
  contactSync: Boolean
  userReviewses(where: UserReviewsWhereInput, orderBy: UserReviewsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserReviews!]
  isBlocked: Boolean
  promoCode: String
  userPromoCount: Int
  typeAccess: String!
  password: String
  installLocation: String
  currentLocation: String
  profileImage: String
  bookingOtp: String
  otpExpires: DateTime
  isPremiumUser: String
  premiumStartDate: DateTime
  premiumExpireDate: DateTime
  renoPass: RenoPass
  hasActiveOrder: Boolean
  hasPaymentDispute: Boolean
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String
  firstname: String
  id: ID
  facebookID: String!
  lastname: String
  mobile: String
  totalOrders: Int
  orderses: OrdersCreateManyWithoutUserInput
  contactSync: Boolean
  userReviewses: UserReviewsCreateManyWithoutUserInput
  isBlocked: Boolean
  promoCode: String
  userPromoCount: Int
  typeAccess: String
  password: String
  installLocation: String
  currentLocation: String
  profileImage: String
  bookingOtp: String
  otpExpires: DateTime
  isPremiumUser: String
  premiumStartDate: DateTime
  premiumExpireDate: DateTime
  renoPass: RenoPassCreateOneWithoutUserInput
  hasActiveOrder: Boolean
  hasPaymentDispute: Boolean
}

input UserCreateOneWithoutOrdersesInput {
  create: UserCreateWithoutOrdersesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRenoPassInput {
  create: UserCreateWithoutRenoPassInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutUserReviewsesInput {
  create: UserCreateWithoutUserReviewsesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutOrdersesInput {
  email: String
  firstname: String
  id: ID
  facebookID: String!
  lastname: String
  mobile: String
  totalOrders: Int
  contactSync: Boolean
  userReviewses: UserReviewsCreateManyWithoutUserInput
  isBlocked: Boolean
  promoCode: String
  userPromoCount: Int
  typeAccess: String
  password: String
  installLocation: String
  currentLocation: String
  profileImage: String
  bookingOtp: String
  otpExpires: DateTime
  isPremiumUser: String
  premiumStartDate: DateTime
  premiumExpireDate: DateTime
  renoPass: RenoPassCreateOneWithoutUserInput
  hasActiveOrder: Boolean
  hasPaymentDispute: Boolean
}

input UserCreateWithoutRenoPassInput {
  email: String
  firstname: String
  id: ID
  facebookID: String!
  lastname: String
  mobile: String
  totalOrders: Int
  orderses: OrdersCreateManyWithoutUserInput
  contactSync: Boolean
  userReviewses: UserReviewsCreateManyWithoutUserInput
  isBlocked: Boolean
  promoCode: String
  userPromoCount: Int
  typeAccess: String
  password: String
  installLocation: String
  currentLocation: String
  profileImage: String
  bookingOtp: String
  otpExpires: DateTime
  isPremiumUser: String
  premiumStartDate: DateTime
  premiumExpireDate: DateTime
  hasActiveOrder: Boolean
  hasPaymentDispute: Boolean
}

input UserCreateWithoutUserReviewsesInput {
  email: String
  firstname: String
  id: ID
  facebookID: String!
  lastname: String
  mobile: String
  totalOrders: Int
  orderses: OrdersCreateManyWithoutUserInput
  contactSync: Boolean
  isBlocked: Boolean
  promoCode: String
  userPromoCount: Int
  typeAccess: String
  password: String
  installLocation: String
  currentLocation: String
  profileImage: String
  bookingOtp: String
  otpExpires: DateTime
  isPremiumUser: String
  premiumStartDate: DateTime
  premiumExpireDate: DateTime
  renoPass: RenoPassCreateOneWithoutUserInput
  hasActiveOrder: Boolean
  hasPaymentDispute: Boolean
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  firstname_ASC
  firstname_DESC
  id_ASC
  id_DESC
  facebookID_ASC
  facebookID_DESC
  lastname_ASC
  lastname_DESC
  mobile_ASC
  mobile_DESC
  totalOrders_ASC
  totalOrders_DESC
  contactSync_ASC
  contactSync_DESC
  isBlocked_ASC
  isBlocked_DESC
  promoCode_ASC
  promoCode_DESC
  userPromoCount_ASC
  userPromoCount_DESC
  typeAccess_ASC
  typeAccess_DESC
  password_ASC
  password_DESC
  installLocation_ASC
  installLocation_DESC
  currentLocation_ASC
  currentLocation_DESC
  profileImage_ASC
  profileImage_DESC
  bookingOtp_ASC
  bookingOtp_DESC
  otpExpires_ASC
  otpExpires_DESC
  isPremiumUser_ASC
  isPremiumUser_DESC
  premiumStartDate_ASC
  premiumStartDate_DESC
  premiumExpireDate_ASC
  premiumExpireDate_DESC
  hasActiveOrder_ASC
  hasActiveOrder_DESC
  hasPaymentDispute_ASC
  hasPaymentDispute_DESC
}

type UserPreviousValues {
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String
  firstname: String
  id: ID!
  facebookID: String!
  lastname: String
  mobile: String
  totalOrders: Int
  contactSync: Boolean
  isBlocked: Boolean
  promoCode: String
  userPromoCount: Int
  typeAccess: String!
  password: String
  installLocation: String
  currentLocation: String
  profileImage: String
  bookingOtp: String
  otpExpires: DateTime
  isPremiumUser: String
  premiumStartDate: DateTime
  premiumExpireDate: DateTime
  hasActiveOrder: Boolean
  hasPaymentDispute: Boolean
}

type UserReviews {
  id: ID!
  review: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  rating: Int!
  restaurants: Restaurants
  user: User
}

type UserReviewsConnection {
  pageInfo: PageInfo!
  edges: [UserReviewsEdge]!
  aggregate: AggregateUserReviews!
}

input UserReviewsCreateInput {
  id: ID
  review: String!
  rating: Int!
  restaurants: RestaurantsCreateOneWithoutUserReviewsesInput
  user: UserCreateOneWithoutUserReviewsesInput
}

input UserReviewsCreateManyWithoutRestaurantsInput {
  create: [UserReviewsCreateWithoutRestaurantsInput!]
  connect: [UserReviewsWhereUniqueInput!]
}

input UserReviewsCreateManyWithoutUserInput {
  create: [UserReviewsCreateWithoutUserInput!]
  connect: [UserReviewsWhereUniqueInput!]
}

input UserReviewsCreateWithoutRestaurantsInput {
  id: ID
  review: String!
  rating: Int!
  user: UserCreateOneWithoutUserReviewsesInput
}

input UserReviewsCreateWithoutUserInput {
  id: ID
  review: String!
  rating: Int!
  restaurants: RestaurantsCreateOneWithoutUserReviewsesInput
}

type UserReviewsEdge {
  node: UserReviews!
  cursor: String!
}

enum UserReviewsOrderByInput {
  id_ASC
  id_DESC
  review_ASC
  review_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  rating_ASC
  rating_DESC
}

type UserReviewsPreviousValues {
  id: ID!
  review: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  rating: Int!
}

input UserReviewsScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  review: String
  review_not: String
  review_in: [String!]
  review_not_in: [String!]
  review_lt: String
  review_lte: String
  review_gt: String
  review_gte: String
  review_contains: String
  review_not_contains: String
  review_starts_with: String
  review_not_starts_with: String
  review_ends_with: String
  review_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  rating: Int
  rating_not: Int
  rating_in: [Int!]
  rating_not_in: [Int!]
  rating_lt: Int
  rating_lte: Int
  rating_gt: Int
  rating_gte: Int
  AND: [UserReviewsScalarWhereInput!]
  OR: [UserReviewsScalarWhereInput!]
  NOT: [UserReviewsScalarWhereInput!]
}

type UserReviewsSubscriptionPayload {
  mutation: MutationType!
  node: UserReviews
  updatedFields: [String!]
  previousValues: UserReviewsPreviousValues
}

input UserReviewsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserReviewsWhereInput
  AND: [UserReviewsSubscriptionWhereInput!]
  OR: [UserReviewsSubscriptionWhereInput!]
  NOT: [UserReviewsSubscriptionWhereInput!]
}

input UserReviewsUpdateInput {
  review: String
  rating: Int
  restaurants: RestaurantsUpdateOneWithoutUserReviewsesInput
  user: UserUpdateOneWithoutUserReviewsesInput
}

input UserReviewsUpdateManyDataInput {
  review: String
  rating: Int
}

input UserReviewsUpdateManyMutationInput {
  review: String
  rating: Int
}

input UserReviewsUpdateManyWithoutRestaurantsInput {
  create: [UserReviewsCreateWithoutRestaurantsInput!]
  delete: [UserReviewsWhereUniqueInput!]
  connect: [UserReviewsWhereUniqueInput!]
  set: [UserReviewsWhereUniqueInput!]
  disconnect: [UserReviewsWhereUniqueInput!]
  update: [UserReviewsUpdateWithWhereUniqueWithoutRestaurantsInput!]
  upsert: [UserReviewsUpsertWithWhereUniqueWithoutRestaurantsInput!]
  deleteMany: [UserReviewsScalarWhereInput!]
  updateMany: [UserReviewsUpdateManyWithWhereNestedInput!]
}

input UserReviewsUpdateManyWithoutUserInput {
  create: [UserReviewsCreateWithoutUserInput!]
  delete: [UserReviewsWhereUniqueInput!]
  connect: [UserReviewsWhereUniqueInput!]
  set: [UserReviewsWhereUniqueInput!]
  disconnect: [UserReviewsWhereUniqueInput!]
  update: [UserReviewsUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [UserReviewsUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [UserReviewsScalarWhereInput!]
  updateMany: [UserReviewsUpdateManyWithWhereNestedInput!]
}

input UserReviewsUpdateManyWithWhereNestedInput {
  where: UserReviewsScalarWhereInput!
  data: UserReviewsUpdateManyDataInput!
}

input UserReviewsUpdateWithoutRestaurantsDataInput {
  review: String
  rating: Int
  user: UserUpdateOneWithoutUserReviewsesInput
}

input UserReviewsUpdateWithoutUserDataInput {
  review: String
  rating: Int
  restaurants: RestaurantsUpdateOneWithoutUserReviewsesInput
}

input UserReviewsUpdateWithWhereUniqueWithoutRestaurantsInput {
  where: UserReviewsWhereUniqueInput!
  data: UserReviewsUpdateWithoutRestaurantsDataInput!
}

input UserReviewsUpdateWithWhereUniqueWithoutUserInput {
  where: UserReviewsWhereUniqueInput!
  data: UserReviewsUpdateWithoutUserDataInput!
}

input UserReviewsUpsertWithWhereUniqueWithoutRestaurantsInput {
  where: UserReviewsWhereUniqueInput!
  update: UserReviewsUpdateWithoutRestaurantsDataInput!
  create: UserReviewsCreateWithoutRestaurantsInput!
}

input UserReviewsUpsertWithWhereUniqueWithoutUserInput {
  where: UserReviewsWhereUniqueInput!
  update: UserReviewsUpdateWithoutUserDataInput!
  create: UserReviewsCreateWithoutUserInput!
}

input UserReviewsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  review: String
  review_not: String
  review_in: [String!]
  review_not_in: [String!]
  review_lt: String
  review_lte: String
  review_gt: String
  review_gte: String
  review_contains: String
  review_not_contains: String
  review_starts_with: String
  review_not_starts_with: String
  review_ends_with: String
  review_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  rating: Int
  rating_not: Int
  rating_in: [Int!]
  rating_not_in: [Int!]
  rating_lt: Int
  rating_lte: Int
  rating_gt: Int
  rating_gte: Int
  restaurants: RestaurantsWhereInput
  user: UserWhereInput
  AND: [UserReviewsWhereInput!]
  OR: [UserReviewsWhereInput!]
  NOT: [UserReviewsWhereInput!]
}

input UserReviewsWhereUniqueInput {
  id: ID
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  firstname: String
  facebookID: String
  lastname: String
  mobile: String
  totalOrders: Int
  orderses: OrdersUpdateManyWithoutUserInput
  contactSync: Boolean
  userReviewses: UserReviewsUpdateManyWithoutUserInput
  isBlocked: Boolean
  promoCode: String
  userPromoCount: Int
  typeAccess: String
  password: String
  installLocation: String
  currentLocation: String
  profileImage: String
  bookingOtp: String
  otpExpires: DateTime
  isPremiumUser: String
  premiumStartDate: DateTime
  premiumExpireDate: DateTime
  renoPass: RenoPassUpdateOneWithoutUserInput
  hasActiveOrder: Boolean
  hasPaymentDispute: Boolean
}

input UserUpdateManyMutationInput {
  email: String
  firstname: String
  facebookID: String
  lastname: String
  mobile: String
  totalOrders: Int
  contactSync: Boolean
  isBlocked: Boolean
  promoCode: String
  userPromoCount: Int
  typeAccess: String
  password: String
  installLocation: String
  currentLocation: String
  profileImage: String
  bookingOtp: String
  otpExpires: DateTime
  isPremiumUser: String
  premiumStartDate: DateTime
  premiumExpireDate: DateTime
  hasActiveOrder: Boolean
  hasPaymentDispute: Boolean
}

input UserUpdateOneRequiredWithoutOrdersesInput {
  create: UserCreateWithoutOrdersesInput
  update: UserUpdateWithoutOrdersesDataInput
  upsert: UserUpsertWithoutOrdersesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutRenoPassInput {
  create: UserCreateWithoutRenoPassInput
  update: UserUpdateWithoutRenoPassDataInput
  upsert: UserUpsertWithoutRenoPassInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutUserReviewsesInput {
  create: UserCreateWithoutUserReviewsesInput
  update: UserUpdateWithoutUserReviewsesDataInput
  upsert: UserUpsertWithoutUserReviewsesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutOrdersesDataInput {
  email: String
  firstname: String
  facebookID: String
  lastname: String
  mobile: String
  totalOrders: Int
  contactSync: Boolean
  userReviewses: UserReviewsUpdateManyWithoutUserInput
  isBlocked: Boolean
  promoCode: String
  userPromoCount: Int
  typeAccess: String
  password: String
  installLocation: String
  currentLocation: String
  profileImage: String
  bookingOtp: String
  otpExpires: DateTime
  isPremiumUser: String
  premiumStartDate: DateTime
  premiumExpireDate: DateTime
  renoPass: RenoPassUpdateOneWithoutUserInput
  hasActiveOrder: Boolean
  hasPaymentDispute: Boolean
}

input UserUpdateWithoutRenoPassDataInput {
  email: String
  firstname: String
  facebookID: String
  lastname: String
  mobile: String
  totalOrders: Int
  orderses: OrdersUpdateManyWithoutUserInput
  contactSync: Boolean
  userReviewses: UserReviewsUpdateManyWithoutUserInput
  isBlocked: Boolean
  promoCode: String
  userPromoCount: Int
  typeAccess: String
  password: String
  installLocation: String
  currentLocation: String
  profileImage: String
  bookingOtp: String
  otpExpires: DateTime
  isPremiumUser: String
  premiumStartDate: DateTime
  premiumExpireDate: DateTime
  hasActiveOrder: Boolean
  hasPaymentDispute: Boolean
}

input UserUpdateWithoutUserReviewsesDataInput {
  email: String
  firstname: String
  facebookID: String
  lastname: String
  mobile: String
  totalOrders: Int
  orderses: OrdersUpdateManyWithoutUserInput
  contactSync: Boolean
  isBlocked: Boolean
  promoCode: String
  userPromoCount: Int
  typeAccess: String
  password: String
  installLocation: String
  currentLocation: String
  profileImage: String
  bookingOtp: String
  otpExpires: DateTime
  isPremiumUser: String
  premiumStartDate: DateTime
  premiumExpireDate: DateTime
  renoPass: RenoPassUpdateOneWithoutUserInput
  hasActiveOrder: Boolean
  hasPaymentDispute: Boolean
}

input UserUpsertWithoutOrdersesInput {
  update: UserUpdateWithoutOrdersesDataInput!
  create: UserCreateWithoutOrdersesInput!
}

input UserUpsertWithoutRenoPassInput {
  update: UserUpdateWithoutRenoPassDataInput!
  create: UserCreateWithoutRenoPassInput!
}

input UserUpsertWithoutUserReviewsesInput {
  update: UserUpdateWithoutUserReviewsesDataInput!
  create: UserCreateWithoutUserReviewsesInput!
}

input UserWhereInput {
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  facebookID: String
  facebookID_not: String
  facebookID_in: [String!]
  facebookID_not_in: [String!]
  facebookID_lt: String
  facebookID_lte: String
  facebookID_gt: String
  facebookID_gte: String
  facebookID_contains: String
  facebookID_not_contains: String
  facebookID_starts_with: String
  facebookID_not_starts_with: String
  facebookID_ends_with: String
  facebookID_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  mobile: String
  mobile_not: String
  mobile_in: [String!]
  mobile_not_in: [String!]
  mobile_lt: String
  mobile_lte: String
  mobile_gt: String
  mobile_gte: String
  mobile_contains: String
  mobile_not_contains: String
  mobile_starts_with: String
  mobile_not_starts_with: String
  mobile_ends_with: String
  mobile_not_ends_with: String
  totalOrders: Int
  totalOrders_not: Int
  totalOrders_in: [Int!]
  totalOrders_not_in: [Int!]
  totalOrders_lt: Int
  totalOrders_lte: Int
  totalOrders_gt: Int
  totalOrders_gte: Int
  orderses_every: OrdersWhereInput
  orderses_some: OrdersWhereInput
  orderses_none: OrdersWhereInput
  contactSync: Boolean
  contactSync_not: Boolean
  userReviewses_every: UserReviewsWhereInput
  userReviewses_some: UserReviewsWhereInput
  userReviewses_none: UserReviewsWhereInput
  isBlocked: Boolean
  isBlocked_not: Boolean
  promoCode: String
  promoCode_not: String
  promoCode_in: [String!]
  promoCode_not_in: [String!]
  promoCode_lt: String
  promoCode_lte: String
  promoCode_gt: String
  promoCode_gte: String
  promoCode_contains: String
  promoCode_not_contains: String
  promoCode_starts_with: String
  promoCode_not_starts_with: String
  promoCode_ends_with: String
  promoCode_not_ends_with: String
  userPromoCount: Int
  userPromoCount_not: Int
  userPromoCount_in: [Int!]
  userPromoCount_not_in: [Int!]
  userPromoCount_lt: Int
  userPromoCount_lte: Int
  userPromoCount_gt: Int
  userPromoCount_gte: Int
  typeAccess: String
  typeAccess_not: String
  typeAccess_in: [String!]
  typeAccess_not_in: [String!]
  typeAccess_lt: String
  typeAccess_lte: String
  typeAccess_gt: String
  typeAccess_gte: String
  typeAccess_contains: String
  typeAccess_not_contains: String
  typeAccess_starts_with: String
  typeAccess_not_starts_with: String
  typeAccess_ends_with: String
  typeAccess_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  installLocation: String
  installLocation_not: String
  installLocation_in: [String!]
  installLocation_not_in: [String!]
  installLocation_lt: String
  installLocation_lte: String
  installLocation_gt: String
  installLocation_gte: String
  installLocation_contains: String
  installLocation_not_contains: String
  installLocation_starts_with: String
  installLocation_not_starts_with: String
  installLocation_ends_with: String
  installLocation_not_ends_with: String
  currentLocation: String
  currentLocation_not: String
  currentLocation_in: [String!]
  currentLocation_not_in: [String!]
  currentLocation_lt: String
  currentLocation_lte: String
  currentLocation_gt: String
  currentLocation_gte: String
  currentLocation_contains: String
  currentLocation_not_contains: String
  currentLocation_starts_with: String
  currentLocation_not_starts_with: String
  currentLocation_ends_with: String
  currentLocation_not_ends_with: String
  profileImage: String
  profileImage_not: String
  profileImage_in: [String!]
  profileImage_not_in: [String!]
  profileImage_lt: String
  profileImage_lte: String
  profileImage_gt: String
  profileImage_gte: String
  profileImage_contains: String
  profileImage_not_contains: String
  profileImage_starts_with: String
  profileImage_not_starts_with: String
  profileImage_ends_with: String
  profileImage_not_ends_with: String
  bookingOtp: String
  bookingOtp_not: String
  bookingOtp_in: [String!]
  bookingOtp_not_in: [String!]
  bookingOtp_lt: String
  bookingOtp_lte: String
  bookingOtp_gt: String
  bookingOtp_gte: String
  bookingOtp_contains: String
  bookingOtp_not_contains: String
  bookingOtp_starts_with: String
  bookingOtp_not_starts_with: String
  bookingOtp_ends_with: String
  bookingOtp_not_ends_with: String
  otpExpires: DateTime
  otpExpires_not: DateTime
  otpExpires_in: [DateTime!]
  otpExpires_not_in: [DateTime!]
  otpExpires_lt: DateTime
  otpExpires_lte: DateTime
  otpExpires_gt: DateTime
  otpExpires_gte: DateTime
  isPremiumUser: String
  isPremiumUser_not: String
  isPremiumUser_in: [String!]
  isPremiumUser_not_in: [String!]
  isPremiumUser_lt: String
  isPremiumUser_lte: String
  isPremiumUser_gt: String
  isPremiumUser_gte: String
  isPremiumUser_contains: String
  isPremiumUser_not_contains: String
  isPremiumUser_starts_with: String
  isPremiumUser_not_starts_with: String
  isPremiumUser_ends_with: String
  isPremiumUser_not_ends_with: String
  premiumStartDate: DateTime
  premiumStartDate_not: DateTime
  premiumStartDate_in: [DateTime!]
  premiumStartDate_not_in: [DateTime!]
  premiumStartDate_lt: DateTime
  premiumStartDate_lte: DateTime
  premiumStartDate_gt: DateTime
  premiumStartDate_gte: DateTime
  premiumExpireDate: DateTime
  premiumExpireDate_not: DateTime
  premiumExpireDate_in: [DateTime!]
  premiumExpireDate_not_in: [DateTime!]
  premiumExpireDate_lt: DateTime
  premiumExpireDate_lte: DateTime
  premiumExpireDate_gt: DateTime
  premiumExpireDate_gte: DateTime
  renoPass: RenoPassWhereInput
  hasActiveOrder: Boolean
  hasActiveOrder_not: Boolean
  hasPaymentDispute: Boolean
  hasPaymentDispute_not: Boolean
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  facebookID: String
  promoCode: String
}

type Wednesday {
  exhausted: Boolean!
  id: ID!
  restaurants: Restaurants
  timeDiscounts(where: TimeDiscountWhereInput, orderBy: TimeDiscountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeDiscount!]
  order: Int
}

type WednesdayConnection {
  pageInfo: PageInfo!
  edges: [WednesdayEdge]!
  aggregate: AggregateWednesday!
}

input WednesdayCreateInput {
  exhausted: Boolean
  id: ID
  restaurants: RestaurantsCreateOneWithoutWednesdayInput
  timeDiscounts: TimeDiscountCreateManyWithoutWednesdayInput
  order: Int
}

input WednesdayCreateOneWithoutRestaurantsInput {
  create: WednesdayCreateWithoutRestaurantsInput
  connect: WednesdayWhereUniqueInput
}

input WednesdayCreateOneWithoutTimeDiscountsInput {
  create: WednesdayCreateWithoutTimeDiscountsInput
  connect: WednesdayWhereUniqueInput
}

input WednesdayCreateWithoutRestaurantsInput {
  exhausted: Boolean
  id: ID
  timeDiscounts: TimeDiscountCreateManyWithoutWednesdayInput
  order: Int
}

input WednesdayCreateWithoutTimeDiscountsInput {
  exhausted: Boolean
  id: ID
  restaurants: RestaurantsCreateOneWithoutWednesdayInput
  order: Int
}

type WednesdayEdge {
  node: Wednesday!
  cursor: String!
}

enum WednesdayOrderByInput {
  exhausted_ASC
  exhausted_DESC
  id_ASC
  id_DESC
  order_ASC
  order_DESC
}

type WednesdayPreviousValues {
  exhausted: Boolean!
  id: ID!
  order: Int
}

type WednesdaySubscriptionPayload {
  mutation: MutationType!
  node: Wednesday
  updatedFields: [String!]
  previousValues: WednesdayPreviousValues
}

input WednesdaySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WednesdayWhereInput
  AND: [WednesdaySubscriptionWhereInput!]
  OR: [WednesdaySubscriptionWhereInput!]
  NOT: [WednesdaySubscriptionWhereInput!]
}

input WednesdayUpdateInput {
  exhausted: Boolean
  restaurants: RestaurantsUpdateOneWithoutWednesdayInput
  timeDiscounts: TimeDiscountUpdateManyWithoutWednesdayInput
  order: Int
}

input WednesdayUpdateManyMutationInput {
  exhausted: Boolean
  order: Int
}

input WednesdayUpdateOneWithoutRestaurantsInput {
  create: WednesdayCreateWithoutRestaurantsInput
  update: WednesdayUpdateWithoutRestaurantsDataInput
  upsert: WednesdayUpsertWithoutRestaurantsInput
  delete: Boolean
  disconnect: Boolean
  connect: WednesdayWhereUniqueInput
}

input WednesdayUpdateOneWithoutTimeDiscountsInput {
  create: WednesdayCreateWithoutTimeDiscountsInput
  update: WednesdayUpdateWithoutTimeDiscountsDataInput
  upsert: WednesdayUpsertWithoutTimeDiscountsInput
  delete: Boolean
  disconnect: Boolean
  connect: WednesdayWhereUniqueInput
}

input WednesdayUpdateWithoutRestaurantsDataInput {
  exhausted: Boolean
  timeDiscounts: TimeDiscountUpdateManyWithoutWednesdayInput
  order: Int
}

input WednesdayUpdateWithoutTimeDiscountsDataInput {
  exhausted: Boolean
  restaurants: RestaurantsUpdateOneWithoutWednesdayInput
  order: Int
}

input WednesdayUpsertWithoutRestaurantsInput {
  update: WednesdayUpdateWithoutRestaurantsDataInput!
  create: WednesdayCreateWithoutRestaurantsInput!
}

input WednesdayUpsertWithoutTimeDiscountsInput {
  update: WednesdayUpdateWithoutTimeDiscountsDataInput!
  create: WednesdayCreateWithoutTimeDiscountsInput!
}

input WednesdayWhereInput {
  exhausted: Boolean
  exhausted_not: Boolean
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  restaurants: RestaurantsWhereInput
  timeDiscounts_every: TimeDiscountWhereInput
  timeDiscounts_some: TimeDiscountWhereInput
  timeDiscounts_none: TimeDiscountWhereInput
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  AND: [WednesdayWhereInput!]
  OR: [WednesdayWhereInput!]
  NOT: [WednesdayWhereInput!]
}

input WednesdayWhereUniqueInput {
  id: ID
}
`
      }
    